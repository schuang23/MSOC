-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    theta_V : IN STD_LOGIC_VECTOR (11 downto 0);
    s_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    s_V_ap_vld : OUT STD_LOGIC;
    c_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    c_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.626500,HLS_SYN_LAT=65,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=88,HLS_SYN_LUT=167,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_400 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_26D : STD_LOGIC_VECTOR (11 downto 0) := "001001101101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_reg_242 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_134_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_251 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal cos_shift_V_reg_256 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln18_fu_128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sin_shift_V_reg_261 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_7_fu_214_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_V_7_reg_266 : STD_LOGIC_VECTOR (11 downto 0);
    signal current_cos_V_fu_218_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal current_sin_V_fu_223_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal factor_0_reg_72 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_4_reg_83 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Val2_2_reg_96 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_0_reg_109 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_fu_140_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1118_fu_144_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_fu_150_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_5_fu_228_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1116_2_fu_174_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1118_1_fu_178_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_2_fu_184_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_V_6_fu_235_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln_fu_204_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_5_fu_228_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln1118_fu_161_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_V_6_fu_235_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component cordic_mul_mul_13bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    cordic_mul_mul_13bkb_U1 : component cordic_mul_mul_13bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_fu_150_p3,
        din1 => r_V_5_fu_228_p1,
        dout => r_V_5_fu_228_p2);

    cordic_mul_mul_13bkb_U2 : component cordic_mul_mul_13bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        dout_WIDTH => 22)
    port map (
        din0 => r_V_2_fu_184_p3,
        din1 => r_V_6_fu_235_p1,
        dout => r_V_6_fu_235_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    factor_0_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                factor_0_reg_72 <= r_V_7_reg_266;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                factor_0_reg_72 <= ap_const_lv12_400;
            end if; 
        end if;
    end process;

    j_0_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_109 <= j_reg_251;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_109 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_Val2_2_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_2_reg_96 <= current_cos_V_fu_218_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_2_reg_96 <= ap_const_lv12_26D;
            end if; 
        end if;
    end process;

    p_Val2_4_reg_83_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_Val2_4_reg_83 <= current_sin_V_fu_223_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_4_reg_83 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_128_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                cos_shift_V_reg_256 <= r_V_5_fu_228_p2(21 downto 10);
                r_V_7_reg_266 <= r_V_7_fu_214_p1;
                sin_shift_V_reg_261 <= r_V_6_fu_235_p2(21 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_reg_251 <= j_fu_134_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_242 <= theta_V(11 downto 11);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln18_fu_128_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_128_p2)
    begin
        if (((icmp_ln18_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_128_p2)
    begin
        if (((icmp_ln18_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_V <= p_Val2_2_reg_96;

    c_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_128_p2)
    begin
        if (((icmp_ln18_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_V_ap_vld <= ap_const_logic_1;
        else 
            c_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    current_cos_V_fu_218_p2 <= std_logic_vector(signed(p_Val2_2_reg_96) - signed(sin_shift_V_reg_261));
    current_sin_V_fu_223_p2 <= std_logic_vector(unsigned(cos_shift_V_reg_256) + unsigned(p_Val2_4_reg_83));
    icmp_ln18_fu_128_p2 <= "1" when (j_0_reg_109 = ap_const_lv6_20) else "0";
    j_fu_134_p2 <= std_logic_vector(unsigned(j_0_reg_109) + unsigned(ap_const_lv6_1));
    r_V_2_fu_184_p3 <= 
        sub_ln1118_1_fu_178_p2 when (tmp_reg_242(0) = '1') else 
        sext_ln1116_2_fu_174_p1;
    r_V_5_fu_228_p1 <= sext_ln1118_fu_161_p1(12 - 1 downto 0);
    r_V_6_fu_235_p1 <= sext_ln1118_fu_161_p1(12 - 1 downto 0);
        r_V_7_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_204_p4),12));

    r_V_fu_150_p3 <= 
        sub_ln1118_fu_144_p2 when (tmp_reg_242(0) = '1') else 
        sext_ln1116_fu_140_p1;
    s_V <= p_Val2_4_reg_83;

    s_V_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_128_p2)
    begin
        if (((icmp_ln18_fu_128_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            s_V_ap_vld <= ap_const_logic_1;
        else 
            s_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln1116_2_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_83),13));

        sext_ln1116_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_2_reg_96),13));

        sext_ln1118_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(factor_0_reg_72),22));

    sub_ln1118_1_fu_178_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln1116_2_fu_174_p1));
    sub_ln1118_fu_144_p2 <= std_logic_vector(unsigned(ap_const_lv13_0) - unsigned(sext_ln1116_fu_140_p1));
    trunc_ln_fu_204_p4 <= factor_0_reg_72(11 downto 1);
end behav;
