

================================================================
== Vivado HLS Report for 'cordic'
================================================================
* Date:           Sun Dec 20 21:49:44 2020

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        cordic_hls
* Solution:       Improved
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+-----------+------------+
    |  Clock |  Target  | Estimated | Uncertainty|
    +--------+----------+-----------+------------+
    |ap_clk  | 10.00 ns | 10.242 ns |   1.25 ns  |
    +--------+----------+-----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |       34|       34| 0.348 us | 0.348 us |   34|   34|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |          |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+---------+---------+----------+-----------+-----------+------+----------+
        |- L1      |       32|       32|         2|          1|          1|    32|    yes   |
        +----------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 4
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 4 3 
3 --> 2 
4 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.76>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i12 %theta_V), !map !84"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i12* %s_V), !map !90"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i12* %c_V), !map !94"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @cordic_str) nounwind"   --->   Operation 8 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (1.00ns)   --->   "%theta_V_read = call i12 @_ssdm_op_Read.s_axilite.i12(i12 %theta_V)" [cordic.cpp:8]   --->   Operation 9 'read' 'theta_V_read' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i12* %c_V, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [cordic.cpp:10]   --->   Operation 10 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [cordic.cpp:10]   --->   Operation 11 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i12* %s_V, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [cordic.cpp:10]   --->   Operation 12 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i12 %theta_V, [10 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [cordic.cpp:10]   --->   Operation 13 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (1.76ns)   --->   "br label %0" [cordic.cpp:18]   --->   Operation 14 'br' <Predicate = true> <Delay = 1.76>

State 2 <SV = 1> <Delay = 3.25>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%p_Val2_4 = phi i12 [ %theta_V_read, %ap_fixed_base.exit759 ], [ %select_ln1495, %L1 ]" [cordic.cpp:8]   --->   Operation 15 'phi' 'p_Val2_4' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (0.00ns)   --->   "%factor_0 = phi i12 [ 1024, %ap_fixed_base.exit759 ], [ %r_V_9, %L1 ]"   --->   Operation 16 'phi' 'factor_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "%p_Val2_2 = phi i12 [ 0, %ap_fixed_base.exit759 ], [ %current_sin_V, %L1 ]"   --->   Operation 17 'phi' 'p_Val2_2' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (0.00ns)   --->   "%p_Val2_s = phi i12 [ 621, %ap_fixed_base.exit759 ], [ %current_cos_V, %L1 ]"   --->   Operation 18 'phi' 'p_Val2_s' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%j_0 = phi i6 [ 0, %ap_fixed_base.exit759 ], [ %j, %L1 ]"   --->   Operation 19 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (1.42ns)   --->   "%icmp_ln18 = icmp eq i6 %j_0, -32" [cordic.cpp:18]   --->   Operation 20 'icmp' 'icmp_ln18' <Predicate = true> <Delay = 1.42> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.42> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 32, i64 32, i64 32)"   --->   Operation 21 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 22 [1/1] (1.82ns)   --->   "%j = add i6 %j_0, 1" [cordic.cpp:18]   --->   Operation 22 'add' 'j' <Predicate = true> <Delay = 1.82> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "br i1 %icmp_ln18, label %1, label %L1" [cordic.cpp:18]   --->   Operation 23 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%zext_ln32 = zext i6 %j_0 to i64" [cordic.cpp:32]   --->   Operation 24 'zext' 'zext_ln32' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%cordic_phase_V_addr = getelementptr [64 x i10]* @cordic_phase_V, i64 0, i64 %zext_ln32" [cordic.cpp:32]   --->   Operation 25 'getelementptr' 'cordic_phase_V_addr' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_2 : Operation 26 [2/2] (3.25ns)   --->   "%p_Val2_5 = load i10* %cordic_phase_V_addr, align 2" [cordic.cpp:32]   --->   Operation 26 'load' 'p_Val2_5' <Predicate = (!icmp_ln18)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 10> <Depth = 64> <ROM>

State 3 <SV = 2> <Delay = 10.2>
ST_3 : Operation 27 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([3 x i8]* @p_str2) nounwind" [cordic.cpp:18]   --->   Operation 27 'specloopname' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 28 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([3 x i8]* @p_str2)" [cordic.cpp:18]   --->   Operation 28 'specregionbegin' 'tmp' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [cordic.cpp:19]   --->   Operation 29 'specpipeline' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 30 [1/1] (0.00ns)   --->   "%tmp_1 = call i1 @_ssdm_op_BitSelect.i1.i12.i32(i12 %p_Val2_4, i32 11)" [cordic.cpp:29]   --->   Operation 30 'bitselect' 'tmp_1' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%r_V = sext i12 %p_Val2_s to i24" [cordic.cpp:30]   --->   Operation 31 'sext' 'r_V' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 32 [1/1] (0.00ns)   --->   "%sext_ln1118_1 = sext i12 %factor_0 to i24" [cordic.cpp:30]   --->   Operation 32 'sext' 'sext_ln1118_1' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 33 [1/1] (6.38ns) (root node of the DSP)   --->   "%r_V_7 = mul i24 %r_V, %sext_ln1118_1" [cordic.cpp:30]   --->   Operation 33 'mul' 'r_V_7' <Predicate = (!icmp_ln18)> <Delay = 6.38> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 34 [1/1] (0.00ns)   --->   "%zext_ln1118 = zext i24 %r_V_7 to i25" [cordic.cpp:30]   --->   Operation 34 'zext' 'zext_ln1118' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 35 [1/1] (2.31ns)   --->   "%r_V_5 = sub i25 0, %zext_ln1118" [cordic.cpp:30]   --->   Operation 35 'sub' 'r_V_5' <Predicate = (!icmp_ln18)> <Delay = 2.31> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 36 [1/1] (0.00ns) (grouped into LUT with out node current_sin_V)   --->   "%cos_shift_V = call i12 @_ssdm_op_PartSelect.i12.i25.i32.i32(i25 %r_V_5, i32 10, i32 21)" [cordic.cpp:30]   --->   Operation 36 'partselect' 'cos_shift_V' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%r_V_2 = sext i12 %p_Val2_2 to i24" [cordic.cpp:31]   --->   Operation 37 'sext' 'r_V_2' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (6.38ns) (root node of the DSP)   --->   "%r_V_8 = mul i24 %sext_ln1118_1, %r_V_2" [cordic.cpp:31]   --->   Operation 38 'mul' 'r_V_8' <Predicate = (!icmp_ln18)> <Delay = 6.38> <Core = "DSP48">   --->   Core 88 'DSP48' <Latency = 0> <II = 1> <Delay = 6.38> <IPBlock> <Opcode : 'mul' 'add' 'sub' 'select'> <InPorts = 0> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 39 [1/1] (0.00ns)   --->   "%zext_ln1118_1 = zext i24 %r_V_8 to i25" [cordic.cpp:31]   --->   Operation 39 'zext' 'zext_ln1118_1' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 40 [1/1] (2.31ns)   --->   "%r_V_6 = sub i25 0, %zext_ln1118_1" [cordic.cpp:31]   --->   Operation 40 'sub' 'r_V_6' <Predicate = (!icmp_ln18)> <Delay = 2.31> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 41 [1/1] (0.00ns) (grouped into LUT with out node current_cos_V)   --->   "%sin_shift_V = call i12 @_ssdm_op_PartSelect.i12.i25.i32.i32(i25 %r_V_6, i32 10, i32 21)" [cordic.cpp:31]   --->   Operation 41 'partselect' 'sin_shift_V' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 42 [1/2] (3.25ns)   --->   "%p_Val2_5 = load i10* %cordic_phase_V_addr, align 2" [cordic.cpp:32]   --->   Operation 42 'load' 'p_Val2_5' <Predicate = (!icmp_ln18)> <Delay = 3.25> <Core = "ROM_nP">   --->   Core 52 'ROM_nP' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load'> <Ports = 0> <Width = 10> <Depth = 64> <ROM>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%zext_ln1265 = zext i10 %p_Val2_5 to i12" [cordic.cpp:32]   --->   Operation 43 'zext' 'zext_ln1265' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (1.54ns)   --->   "%add_ln703 = add i12 %zext_ln1265, %p_Val2_4" [cordic.cpp:32]   --->   Operation 44 'add' 'add_ln703' <Predicate = (!icmp_ln18)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 45 [1/1] (0.00ns) (grouped into LUT with out node current_sin_V)   --->   "%cos_shift_V_1 = call i12 @_ssdm_op_PartSelect.i12.i24.i32.i32(i24 %r_V_7, i32 10, i32 21)" [cordic.cpp:35]   --->   Operation 45 'partselect' 'cos_shift_V_1' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns) (grouped into LUT with out node current_cos_V)   --->   "%sin_shift_V_1 = call i12 @_ssdm_op_PartSelect.i12.i24.i32.i32(i24 %r_V_8, i32 10, i32 21)" [cordic.cpp:36]   --->   Operation 46 'partselect' 'sin_shift_V_1' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (1.54ns)   --->   "%sub_ln703 = sub i12 %p_Val2_4, %zext_ln1265" [cordic.cpp:37]   --->   Operation 47 'sub' 'sub_ln703' <Predicate = (!icmp_ln18)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 48 [1/1] (0.69ns)   --->   "%select_ln1495 = select i1 %tmp_1, i12 %add_ln703, i12 %sub_ln703" [cordic.cpp:29]   --->   Operation 48 'select' 'select_ln1495' <Predicate = (!icmp_ln18)> <Delay = 0.69> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (0.00ns) (grouped into LUT with out node current_sin_V)   --->   "%cos_shift_V_3 = select i1 %tmp_1, i12 %cos_shift_V, i12 %cos_shift_V_1" [cordic.cpp:29]   --->   Operation 49 'select' 'cos_shift_V_3' <Predicate = (!icmp_ln18)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 50 [1/1] (0.00ns) (grouped into LUT with out node current_cos_V)   --->   "%sin_shift_V_3 = select i1 %tmp_1, i12 %sin_shift_V, i12 %sin_shift_V_1" [cordic.cpp:29]   --->   Operation 50 'select' 'sin_shift_V_3' <Predicate = (!icmp_ln18)> <Delay = 0.00> <Core = "Sel">   --->   Core 26 'Sel' <Latency = 0> <II = 1> <Delay = 0.69> <FuncUnit> <Opcode : 'select'> <InPorts = 3> <OutPorts = 1>
ST_3 : Operation 51 [1/1] (1.54ns) (out node of the LUT)   --->   "%current_cos_V = sub i12 %p_Val2_s, %sin_shift_V_3" [cordic.cpp:42]   --->   Operation 51 'sub' 'current_cos_V' <Predicate = (!icmp_ln18)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 52 [1/1] (1.54ns) (out node of the LUT)   --->   "%current_sin_V = add i12 %cos_shift_V_3, %p_Val2_2" [cordic.cpp:43]   --->   Operation 52 'add' 'current_sin_V' <Predicate = (!icmp_ln18)> <Delay = 1.54> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 1.54> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%trunc_ln = call i11 @_ssdm_op_PartSelect.i11.i12.i32.i32(i12 %factor_0, i32 1, i32 11)" [cordic.cpp:48]   --->   Operation 53 'partselect' 'trunc_ln' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "%r_V_9 = sext i11 %trunc_ln to i12" [cordic.cpp:48]   --->   Operation 54 'sext' 'r_V_9' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (0.00ns)   --->   "%empty_8 = call i32 (...)* @_ssdm_op_SpecRegionEnd([3 x i8]* @p_str2, i32 %tmp)" [cordic.cpp:49]   --->   Operation 55 'specregionend' 'empty_8' <Predicate = (!icmp_ln18)> <Delay = 0.00>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "br label %0" [cordic.cpp:18]   --->   Operation 56 'br' <Predicate = (!icmp_ln18)> <Delay = 0.00>

State 4 <SV = 2> <Delay = 1.00>
ST_4 : Operation 57 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i12P(i12* %s_V, i12 %p_Val2_2)" [cordic.cpp:52]   --->   Operation 57 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 58 [1/1] (1.00ns)   --->   "call void @_ssdm_op_Write.s_axilite.i12P(i12* %c_V, i12 %p_Val2_s)" [cordic.cpp:52]   --->   Operation 58 'write' <Predicate = true> <Delay = 1.00> <Core = "s_axilite">   --->   Core 10 's_axilite' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : 'read' 'write'>
ST_4 : Operation 59 [1/1] (0.00ns)   --->   "ret void" [cordic.cpp:53]   --->   Operation 59 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.77ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('__Val2__', cordic.cpp:8) with incoming values : ('ssdm_int<12 + 1024 * 0, true>.V', cordic.cpp:8) ('select_ln1495', cordic.cpp:29) [17]  (1.77 ns)

 <State 2>: 3.25ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', cordic.cpp:18) [21]  (0 ns)
	'getelementptr' operation ('cordic_phase_V_addr', cordic.cpp:32) [43]  (0 ns)
	'load' operation ('__Val2__', cordic.cpp:32) on array 'cordic_phase_V' [44]  (3.25 ns)

 <State 3>: 10.2ns
The critical path consists of the following:
	'mul' operation of DSP[33] ('r.V', cordic.cpp:30) [33]  (6.38 ns)
	'sub' operation ('r.V', cordic.cpp:30) [35]  (2.31 ns)
	'select' operation ('cos_shift.V', cordic.cpp:29) [51]  (0 ns)
	'add' operation ('current_sin.V', cordic.cpp:43) [54]  (1.55 ns)

 <State 4>: 1ns
The critical path consists of the following:
	s_axi write on port 's_V' (cordic.cpp:52) [60]  (1 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
