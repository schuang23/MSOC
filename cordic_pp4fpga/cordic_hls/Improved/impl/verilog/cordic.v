// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cordic,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.241500,HLS_SYN_LAT=34,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=160,HLS_SYN_LUT=381,HLS_VERSION=2019_2}" *)

module cordic (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [11:0] theta_V;
reg    s_V_ap_vld;
reg    c_V_ap_vld;
wire   [5:0] cordic_phase_V_address0;
reg    cordic_phase_V_ce0;
wire   [9:0] cordic_phase_V_q0;
reg   [11:0] p_Val2_4_reg_105;
reg  signed [11:0] factor_0_reg_115;
reg   [11:0] p_Val2_2_reg_127;
reg   [11:0] p_Val2_s_reg_140;
reg   [5:0] j_0_reg_153;
wire   [0:0] icmp_ln18_fu_164_p2;
reg   [0:0] icmp_ln18_reg_344;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] j_fu_170_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [11:0] select_ln1495_fu_273_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [11:0] current_cos_V_fu_297_p2;
wire   [11:0] current_sin_V_fu_303_p2;
wire  signed [11:0] r_V_9_fu_319_p1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln32_fu_176_p1;
wire    ap_CS_fsm_state4;
wire  signed [23:0] r_V_7_fu_323_p2;
wire   [24:0] zext_ln1118_fu_197_p1;
wire   [24:0] r_V_5_fu_200_p2;
wire  signed [23:0] r_V_8_fu_331_p2;
wire   [24:0] zext_ln1118_1_fu_220_p1;
wire   [24:0] r_V_6_fu_223_p2;
wire   [11:0] zext_ln1265_fu_239_p1;
wire   [0:0] tmp_1_fu_181_p3;
wire   [11:0] add_ln703_fu_243_p2;
wire   [11:0] sub_ln703_fu_267_p2;
wire   [11:0] cos_shift_V_fu_206_p4;
wire   [11:0] cos_shift_V_1_fu_249_p4;
wire   [11:0] sin_shift_V_fu_229_p4;
wire   [11:0] sin_shift_V_1_fu_258_p4;
wire   [11:0] sin_shift_V_3_fu_289_p3;
wire   [11:0] cos_shift_V_3_fu_281_p3;
wire   [10:0] trunc_ln_fu_309_p4;
wire  signed [11:0] r_V_7_fu_323_p1;
wire  signed [23:0] sext_ln1118_1_fu_193_p1;
wire  signed [11:0] r_V_8_fu_331_p0;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cordic_cordic_phabkb #(
    .DataWidth( 10 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
cordic_phase_V_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(cordic_phase_V_address0),
    .ce0(cordic_phase_V_ce0),
    .q0(cordic_phase_V_q0)
);

cordic_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
cordic_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .theta_V(theta_V),
    .s_V(p_Val2_2_reg_127),
    .s_V_ap_vld(s_V_ap_vld),
    .c_V(p_Val2_s_reg_140),
    .c_V_ap_vld(c_V_ap_vld)
);

cordic_mul_mul_12cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
cordic_mul_mul_12cud_U1(
    .din0(p_Val2_s_reg_140),
    .din1(r_V_7_fu_323_p1),
    .dout(r_V_7_fu_323_p2)
);

cordic_mul_mul_12cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 24 ))
cordic_mul_mul_12cud_U2(
    .din0(r_V_8_fu_331_p0),
    .din1(p_Val2_2_reg_127),
    .dout(r_V_8_fu_331_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        factor_0_reg_115 <= r_V_9_fu_319_p1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        factor_0_reg_115 <= 12'd1024;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_reg_153 <= j_fu_170_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_153 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_2_reg_127 <= current_sin_V_fu_303_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_2_reg_127 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_4_reg_105 <= select_ln1495_fu_273_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_4_reg_105 <= theta_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln18_reg_344 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_s_reg_140 <= current_cos_V_fu_297_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_Val2_s_reg_140 <= 12'd621;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln18_reg_344 <= icmp_ln18_fu_164_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_164_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_V_ap_vld = 1'b1;
    end else begin
        c_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        cordic_phase_V_ce0 = 1'b1;
    end else begin
        cordic_phase_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        s_V_ap_vld = 1'b1;
    end else begin
        s_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln18_fu_164_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln18_fu_164_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln703_fu_243_p2 = (zext_ln1265_fu_239_p1 + p_Val2_4_reg_105);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign cordic_phase_V_address0 = zext_ln32_fu_176_p1;

assign cos_shift_V_1_fu_249_p4 = {{r_V_7_fu_323_p2[21:10]}};

assign cos_shift_V_3_fu_281_p3 = ((tmp_1_fu_181_p3[0:0] === 1'b1) ? cos_shift_V_fu_206_p4 : cos_shift_V_1_fu_249_p4);

assign cos_shift_V_fu_206_p4 = {{r_V_5_fu_200_p2[21:10]}};

assign current_cos_V_fu_297_p2 = (p_Val2_s_reg_140 - sin_shift_V_3_fu_289_p3);

assign current_sin_V_fu_303_p2 = (cos_shift_V_3_fu_281_p3 + p_Val2_2_reg_127);

assign icmp_ln18_fu_164_p2 = ((j_0_reg_153 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_170_p2 = (j_0_reg_153 + 6'd1);

assign r_V_5_fu_200_p2 = (25'd0 - zext_ln1118_fu_197_p1);

assign r_V_6_fu_223_p2 = (25'd0 - zext_ln1118_1_fu_220_p1);

assign r_V_7_fu_323_p1 = sext_ln1118_1_fu_193_p1;

assign r_V_8_fu_331_p0 = sext_ln1118_1_fu_193_p1;

assign r_V_9_fu_319_p1 = $signed(trunc_ln_fu_309_p4);

assign select_ln1495_fu_273_p3 = ((tmp_1_fu_181_p3[0:0] === 1'b1) ? add_ln703_fu_243_p2 : sub_ln703_fu_267_p2);

assign sext_ln1118_1_fu_193_p1 = factor_0_reg_115;

assign sin_shift_V_1_fu_258_p4 = {{r_V_8_fu_331_p2[21:10]}};

assign sin_shift_V_3_fu_289_p3 = ((tmp_1_fu_181_p3[0:0] === 1'b1) ? sin_shift_V_fu_229_p4 : sin_shift_V_1_fu_258_p4);

assign sin_shift_V_fu_229_p4 = {{r_V_6_fu_223_p2[21:10]}};

assign sub_ln703_fu_267_p2 = (p_Val2_4_reg_105 - zext_ln1265_fu_239_p1);

assign tmp_1_fu_181_p3 = p_Val2_4_reg_105[32'd11];

assign trunc_ln_fu_309_p4 = {{factor_0_reg_115[11:1]}};

assign zext_ln1118_1_fu_220_p1 = $unsigned(r_V_8_fu_331_p2);

assign zext_ln1118_fu_197_p1 = $unsigned(r_V_7_fu_323_p2);

assign zext_ln1265_fu_239_p1 = cordic_phase_V_q0;

assign zext_ln32_fu_176_p1 = j_0_reg_153;

endmodule //cordic
