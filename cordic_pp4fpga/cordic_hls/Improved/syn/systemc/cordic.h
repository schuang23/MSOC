// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cordic_HH_
#define _cordic_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cordic_mul_mul_12cud.h"
#include "cordic_cordic_phabkb.h"
#include "cordic_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 6,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct cordic : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    cordic(sc_module_name name);
    SC_HAS_PROCESS(cordic);

    ~cordic();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    cordic_cordic_phabkb* cordic_phase_V_U;
    cordic_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* cordic_AXILiteS_s_axi_U;
    cordic_mul_mul_12cud<1,1,12,12,24>* cordic_mul_mul_12cud_U1;
    cordic_mul_mul_12cud<1,1,12,12,24>* cordic_mul_mul_12cud_U2;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<12> > theta_V;
    sc_signal< sc_logic > s_V_ap_vld;
    sc_signal< sc_logic > c_V_ap_vld;
    sc_signal< sc_lv<6> > cordic_phase_V_address0;
    sc_signal< sc_logic > cordic_phase_V_ce0;
    sc_signal< sc_lv<10> > cordic_phase_V_q0;
    sc_signal< sc_lv<12> > p_Val2_4_reg_105;
    sc_signal< sc_lv<12> > factor_0_reg_115;
    sc_signal< sc_lv<12> > p_Val2_2_reg_127;
    sc_signal< sc_lv<12> > p_Val2_s_reg_140;
    sc_signal< sc_lv<6> > j_0_reg_153;
    sc_signal< sc_lv<1> > icmp_ln18_fu_164_p2;
    sc_signal< sc_lv<1> > icmp_ln18_reg_344;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > j_fu_170_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<12> > select_ln1495_fu_273_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<12> > current_cos_V_fu_297_p2;
    sc_signal< sc_lv<12> > current_sin_V_fu_303_p2;
    sc_signal< sc_lv<12> > r_V_9_fu_319_p1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln32_fu_176_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<24> > r_V_7_fu_323_p2;
    sc_signal< sc_lv<25> > zext_ln1118_fu_197_p1;
    sc_signal< sc_lv<25> > r_V_5_fu_200_p2;
    sc_signal< sc_lv<24> > r_V_8_fu_331_p2;
    sc_signal< sc_lv<25> > zext_ln1118_1_fu_220_p1;
    sc_signal< sc_lv<25> > r_V_6_fu_223_p2;
    sc_signal< sc_lv<12> > zext_ln1265_fu_239_p1;
    sc_signal< sc_lv<1> > tmp_1_fu_181_p3;
    sc_signal< sc_lv<12> > add_ln703_fu_243_p2;
    sc_signal< sc_lv<12> > sub_ln703_fu_267_p2;
    sc_signal< sc_lv<12> > cos_shift_V_fu_206_p4;
    sc_signal< sc_lv<12> > cos_shift_V_1_fu_249_p4;
    sc_signal< sc_lv<12> > sin_shift_V_fu_229_p4;
    sc_signal< sc_lv<12> > sin_shift_V_1_fu_258_p4;
    sc_signal< sc_lv<12> > sin_shift_V_3_fu_289_p3;
    sc_signal< sc_lv<12> > cos_shift_V_3_fu_281_p3;
    sc_signal< sc_lv<11> > trunc_ln_fu_309_p4;
    sc_signal< sc_lv<12> > r_V_7_fu_323_p1;
    sc_signal< sc_lv<24> > sext_ln1118_1_fu_193_p1;
    sc_signal< sc_lv<12> > r_V_8_fu_331_p0;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<12> ap_const_lv12_400;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<12> ap_const_lv12_26D;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<6> ap_const_lv6_20;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<25> ap_const_lv25_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_15;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln703_fu_243_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_c_V_ap_vld();
    void thread_cordic_phase_V_address0();
    void thread_cordic_phase_V_ce0();
    void thread_cos_shift_V_1_fu_249_p4();
    void thread_cos_shift_V_3_fu_281_p3();
    void thread_cos_shift_V_fu_206_p4();
    void thread_current_cos_V_fu_297_p2();
    void thread_current_sin_V_fu_303_p2();
    void thread_icmp_ln18_fu_164_p2();
    void thread_j_fu_170_p2();
    void thread_r_V_5_fu_200_p2();
    void thread_r_V_6_fu_223_p2();
    void thread_r_V_7_fu_323_p1();
    void thread_r_V_8_fu_331_p0();
    void thread_r_V_9_fu_319_p1();
    void thread_s_V_ap_vld();
    void thread_select_ln1495_fu_273_p3();
    void thread_sext_ln1118_1_fu_193_p1();
    void thread_sin_shift_V_1_fu_258_p4();
    void thread_sin_shift_V_3_fu_289_p3();
    void thread_sin_shift_V_fu_229_p4();
    void thread_sub_ln703_fu_267_p2();
    void thread_tmp_1_fu_181_p3();
    void thread_trunc_ln_fu_309_p4();
    void thread_zext_ln1118_1_fu_220_p1();
    void thread_zext_ln1118_fu_197_p1();
    void thread_zext_ln1265_fu_239_p1();
    void thread_zext_ln32_fu_176_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
