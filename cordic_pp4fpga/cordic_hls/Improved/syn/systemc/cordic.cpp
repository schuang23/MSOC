// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cordic.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cordic::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cordic::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> cordic::ap_ST_fsm_state1 = "1";
const sc_lv<3> cordic::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> cordic::ap_ST_fsm_state4 = "100";
const sc_lv<32> cordic::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool cordic::ap_const_boolean_1 = true;
const int cordic::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> cordic::ap_const_lv32_1 = "1";
const bool cordic::ap_const_boolean_0 = false;
const sc_lv<1> cordic::ap_const_lv1_0 = "0";
const sc_lv<1> cordic::ap_const_lv1_1 = "1";
const sc_lv<12> cordic::ap_const_lv12_400 = "10000000000";
const sc_lv<12> cordic::ap_const_lv12_0 = "000000000000";
const sc_lv<12> cordic::ap_const_lv12_26D = "1001101101";
const sc_lv<6> cordic::ap_const_lv6_0 = "000000";
const sc_lv<32> cordic::ap_const_lv32_2 = "10";
const sc_lv<6> cordic::ap_const_lv6_20 = "100000";
const sc_lv<6> cordic::ap_const_lv6_1 = "1";
const sc_lv<32> cordic::ap_const_lv32_B = "1011";
const sc_lv<25> cordic::ap_const_lv25_0 = "0000000000000000000000000";
const sc_lv<32> cordic::ap_const_lv32_A = "1010";
const sc_lv<32> cordic::ap_const_lv32_15 = "10101";

cordic::cordic(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cordic_phase_V_U = new cordic_cordic_phabkb("cordic_phase_V_U");
    cordic_phase_V_U->clk(ap_clk);
    cordic_phase_V_U->reset(ap_rst_n_inv);
    cordic_phase_V_U->address0(cordic_phase_V_address0);
    cordic_phase_V_U->ce0(cordic_phase_V_ce0);
    cordic_phase_V_U->q0(cordic_phase_V_q0);
    cordic_AXILiteS_s_axi_U = new cordic_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("cordic_AXILiteS_s_axi_U");
    cordic_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    cordic_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    cordic_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    cordic_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    cordic_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    cordic_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    cordic_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    cordic_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    cordic_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    cordic_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    cordic_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    cordic_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    cordic_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    cordic_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    cordic_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    cordic_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    cordic_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    cordic_AXILiteS_s_axi_U->ACLK(ap_clk);
    cordic_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    cordic_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    cordic_AXILiteS_s_axi_U->ap_start(ap_start);
    cordic_AXILiteS_s_axi_U->interrupt(interrupt);
    cordic_AXILiteS_s_axi_U->ap_ready(ap_ready);
    cordic_AXILiteS_s_axi_U->ap_done(ap_done);
    cordic_AXILiteS_s_axi_U->ap_idle(ap_idle);
    cordic_AXILiteS_s_axi_U->theta_V(theta_V);
    cordic_AXILiteS_s_axi_U->s_V(p_Val2_2_reg_127);
    cordic_AXILiteS_s_axi_U->s_V_ap_vld(s_V_ap_vld);
    cordic_AXILiteS_s_axi_U->c_V(p_Val2_s_reg_140);
    cordic_AXILiteS_s_axi_U->c_V_ap_vld(c_V_ap_vld);
    cordic_mul_mul_12cud_U1 = new cordic_mul_mul_12cud<1,1,12,12,24>("cordic_mul_mul_12cud_U1");
    cordic_mul_mul_12cud_U1->din0(p_Val2_s_reg_140);
    cordic_mul_mul_12cud_U1->din1(r_V_7_fu_323_p1);
    cordic_mul_mul_12cud_U1->dout(r_V_7_fu_323_p2);
    cordic_mul_mul_12cud_U2 = new cordic_mul_mul_12cud<1,1,12,12,24>("cordic_mul_mul_12cud_U2");
    cordic_mul_mul_12cud_U2->din0(r_V_8_fu_331_p0);
    cordic_mul_mul_12cud_U2->din1(p_Val2_2_reg_127);
    cordic_mul_mul_12cud_U2->dout(r_V_8_fu_331_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln703_fu_243_p2);
    sensitive << ( p_Val2_4_reg_105 );
    sensitive << ( zext_ln1265_fu_239_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln18_fu_164_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_c_V_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_cordic_phase_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( zext_ln32_fu_176_p1 );

    SC_METHOD(thread_cordic_phase_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_cos_shift_V_1_fu_249_p4);
    sensitive << ( r_V_7_fu_323_p2 );

    SC_METHOD(thread_cos_shift_V_3_fu_281_p3);
    sensitive << ( tmp_1_fu_181_p3 );
    sensitive << ( cos_shift_V_fu_206_p4 );
    sensitive << ( cos_shift_V_1_fu_249_p4 );

    SC_METHOD(thread_cos_shift_V_fu_206_p4);
    sensitive << ( r_V_5_fu_200_p2 );

    SC_METHOD(thread_current_cos_V_fu_297_p2);
    sensitive << ( p_Val2_s_reg_140 );
    sensitive << ( sin_shift_V_3_fu_289_p3 );

    SC_METHOD(thread_current_sin_V_fu_303_p2);
    sensitive << ( p_Val2_2_reg_127 );
    sensitive << ( cos_shift_V_3_fu_281_p3 );

    SC_METHOD(thread_icmp_ln18_fu_164_p2);
    sensitive << ( j_0_reg_153 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_j_fu_170_p2);
    sensitive << ( j_0_reg_153 );

    SC_METHOD(thread_r_V_5_fu_200_p2);
    sensitive << ( zext_ln1118_fu_197_p1 );

    SC_METHOD(thread_r_V_6_fu_223_p2);
    sensitive << ( zext_ln1118_1_fu_220_p1 );

    SC_METHOD(thread_r_V_7_fu_323_p1);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln1118_1_fu_193_p1 );

    SC_METHOD(thread_r_V_8_fu_331_p0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( sext_ln1118_1_fu_193_p1 );

    SC_METHOD(thread_r_V_9_fu_319_p1);
    sensitive << ( trunc_ln_fu_309_p4 );

    SC_METHOD(thread_s_V_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_select_ln1495_fu_273_p3);
    sensitive << ( tmp_1_fu_181_p3 );
    sensitive << ( add_ln703_fu_243_p2 );
    sensitive << ( sub_ln703_fu_267_p2 );

    SC_METHOD(thread_sext_ln1118_1_fu_193_p1);
    sensitive << ( factor_0_reg_115 );

    SC_METHOD(thread_sin_shift_V_1_fu_258_p4);
    sensitive << ( r_V_8_fu_331_p2 );

    SC_METHOD(thread_sin_shift_V_3_fu_289_p3);
    sensitive << ( tmp_1_fu_181_p3 );
    sensitive << ( sin_shift_V_fu_229_p4 );
    sensitive << ( sin_shift_V_1_fu_258_p4 );

    SC_METHOD(thread_sin_shift_V_fu_229_p4);
    sensitive << ( r_V_6_fu_223_p2 );

    SC_METHOD(thread_sub_ln703_fu_267_p2);
    sensitive << ( p_Val2_4_reg_105 );
    sensitive << ( zext_ln1265_fu_239_p1 );

    SC_METHOD(thread_tmp_1_fu_181_p3);
    sensitive << ( p_Val2_4_reg_105 );

    SC_METHOD(thread_trunc_ln_fu_309_p4);
    sensitive << ( factor_0_reg_115 );

    SC_METHOD(thread_zext_ln1118_1_fu_220_p1);
    sensitive << ( r_V_8_fu_331_p2 );

    SC_METHOD(thread_zext_ln1118_fu_197_p1);
    sensitive << ( r_V_7_fu_323_p2 );

    SC_METHOD(thread_zext_ln1265_fu_239_p1);
    sensitive << ( cordic_phase_V_q0 );

    SC_METHOD(thread_zext_ln32_fu_176_p1);
    sensitive << ( j_0_reg_153 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln18_fu_164_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cordic_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, theta_V, "theta_V");
    sc_trace(mVcdFile, s_V_ap_vld, "s_V_ap_vld");
    sc_trace(mVcdFile, c_V_ap_vld, "c_V_ap_vld");
    sc_trace(mVcdFile, cordic_phase_V_address0, "cordic_phase_V_address0");
    sc_trace(mVcdFile, cordic_phase_V_ce0, "cordic_phase_V_ce0");
    sc_trace(mVcdFile, cordic_phase_V_q0, "cordic_phase_V_q0");
    sc_trace(mVcdFile, p_Val2_4_reg_105, "p_Val2_4_reg_105");
    sc_trace(mVcdFile, factor_0_reg_115, "factor_0_reg_115");
    sc_trace(mVcdFile, p_Val2_2_reg_127, "p_Val2_2_reg_127");
    sc_trace(mVcdFile, p_Val2_s_reg_140, "p_Val2_s_reg_140");
    sc_trace(mVcdFile, j_0_reg_153, "j_0_reg_153");
    sc_trace(mVcdFile, icmp_ln18_fu_164_p2, "icmp_ln18_fu_164_p2");
    sc_trace(mVcdFile, icmp_ln18_reg_344, "icmp_ln18_reg_344");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_fu_170_p2, "j_fu_170_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, select_ln1495_fu_273_p3, "select_ln1495_fu_273_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, current_cos_V_fu_297_p2, "current_cos_V_fu_297_p2");
    sc_trace(mVcdFile, current_sin_V_fu_303_p2, "current_sin_V_fu_303_p2");
    sc_trace(mVcdFile, r_V_9_fu_319_p1, "r_V_9_fu_319_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, zext_ln32_fu_176_p1, "zext_ln32_fu_176_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, r_V_7_fu_323_p2, "r_V_7_fu_323_p2");
    sc_trace(mVcdFile, zext_ln1118_fu_197_p1, "zext_ln1118_fu_197_p1");
    sc_trace(mVcdFile, r_V_5_fu_200_p2, "r_V_5_fu_200_p2");
    sc_trace(mVcdFile, r_V_8_fu_331_p2, "r_V_8_fu_331_p2");
    sc_trace(mVcdFile, zext_ln1118_1_fu_220_p1, "zext_ln1118_1_fu_220_p1");
    sc_trace(mVcdFile, r_V_6_fu_223_p2, "r_V_6_fu_223_p2");
    sc_trace(mVcdFile, zext_ln1265_fu_239_p1, "zext_ln1265_fu_239_p1");
    sc_trace(mVcdFile, tmp_1_fu_181_p3, "tmp_1_fu_181_p3");
    sc_trace(mVcdFile, add_ln703_fu_243_p2, "add_ln703_fu_243_p2");
    sc_trace(mVcdFile, sub_ln703_fu_267_p2, "sub_ln703_fu_267_p2");
    sc_trace(mVcdFile, cos_shift_V_fu_206_p4, "cos_shift_V_fu_206_p4");
    sc_trace(mVcdFile, cos_shift_V_1_fu_249_p4, "cos_shift_V_1_fu_249_p4");
    sc_trace(mVcdFile, sin_shift_V_fu_229_p4, "sin_shift_V_fu_229_p4");
    sc_trace(mVcdFile, sin_shift_V_1_fu_258_p4, "sin_shift_V_1_fu_258_p4");
    sc_trace(mVcdFile, sin_shift_V_3_fu_289_p3, "sin_shift_V_3_fu_289_p3");
    sc_trace(mVcdFile, cos_shift_V_3_fu_281_p3, "cos_shift_V_3_fu_281_p3");
    sc_trace(mVcdFile, trunc_ln_fu_309_p4, "trunc_ln_fu_309_p4");
    sc_trace(mVcdFile, r_V_7_fu_323_p1, "r_V_7_fu_323_p1");
    sc_trace(mVcdFile, sext_ln1118_1_fu_193_p1, "sext_ln1118_1_fu_193_p1");
    sc_trace(mVcdFile, r_V_8_fu_331_p0, "r_V_8_fu_331_p0");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("cordic.hdltvin.dat");
    mHdltvoutHandle.open("cordic.hdltvout.dat");
}

cordic::~cordic() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete cordic_phase_V_U;
    delete cordic_AXILiteS_s_axi_U;
    delete cordic_mul_mul_12cud_U1;
    delete cordic_mul_mul_12cud_U2;
}

void cordic::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void cordic::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_344.read(), ap_const_lv1_0))) {
        factor_0_reg_115 = r_V_9_fu_319_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        factor_0_reg_115 = ap_const_lv12_400;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_fu_164_p2.read(), ap_const_lv1_0))) {
        j_0_reg_153 = j_fu_170_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_153 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_344.read(), ap_const_lv1_0))) {
        p_Val2_2_reg_127 = current_sin_V_fu_303_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_2_reg_127 = ap_const_lv12_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_344.read(), ap_const_lv1_0))) {
        p_Val2_4_reg_105 = select_ln1495_fu_273_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_4_reg_105 = theta_V.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(icmp_ln18_reg_344.read(), ap_const_lv1_0))) {
        p_Val2_s_reg_140 = current_cos_V_fu_297_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        p_Val2_s_reg_140 = ap_const_lv12_26D;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln18_reg_344 = icmp_ln18_fu_164_p2.read();
    }
}

void cordic::thread_add_ln703_fu_243_p2() {
    add_ln703_fu_243_p2 = (!zext_ln1265_fu_239_p1.read().is_01() || !p_Val2_4_reg_105.read().is_01())? sc_lv<12>(): (sc_biguint<12>(zext_ln1265_fu_239_p1.read()) + sc_biguint<12>(p_Val2_4_reg_105.read()));
}

void cordic::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void cordic::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cordic::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[2];
}

void cordic::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cordic::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cordic::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cordic::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cordic::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void cordic::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln18_fu_164_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void cordic::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void cordic::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void cordic::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void cordic::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void cordic::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void cordic::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void cordic::thread_c_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        c_V_ap_vld = ap_const_logic_1;
    } else {
        c_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_cordic_phase_V_address0() {
    cordic_phase_V_address0 =  (sc_lv<6>) (zext_ln32_fu_176_p1.read());
}

void cordic::thread_cordic_phase_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        cordic_phase_V_ce0 = ap_const_logic_1;
    } else {
        cordic_phase_V_ce0 = ap_const_logic_0;
    }
}

void cordic::thread_cos_shift_V_1_fu_249_p4() {
    cos_shift_V_1_fu_249_p4 = r_V_7_fu_323_p2.read().range(21, 10);
}

void cordic::thread_cos_shift_V_3_fu_281_p3() {
    cos_shift_V_3_fu_281_p3 = (!tmp_1_fu_181_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_181_p3.read()[0].to_bool())? cos_shift_V_fu_206_p4.read(): cos_shift_V_1_fu_249_p4.read());
}

void cordic::thread_cos_shift_V_fu_206_p4() {
    cos_shift_V_fu_206_p4 = r_V_5_fu_200_p2.read().range(21, 10);
}

void cordic::thread_current_cos_V_fu_297_p2() {
    current_cos_V_fu_297_p2 = (!p_Val2_s_reg_140.read().is_01() || !sin_shift_V_3_fu_289_p3.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_s_reg_140.read()) - sc_biguint<12>(sin_shift_V_3_fu_289_p3.read()));
}

void cordic::thread_current_sin_V_fu_303_p2() {
    current_sin_V_fu_303_p2 = (!cos_shift_V_3_fu_281_p3.read().is_01() || !p_Val2_2_reg_127.read().is_01())? sc_lv<12>(): (sc_biguint<12>(cos_shift_V_3_fu_281_p3.read()) + sc_biguint<12>(p_Val2_2_reg_127.read()));
}

void cordic::thread_icmp_ln18_fu_164_p2() {
    icmp_ln18_fu_164_p2 = (!j_0_reg_153.read().is_01() || !ap_const_lv6_20.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_153.read() == ap_const_lv6_20);
}

void cordic::thread_j_fu_170_p2() {
    j_fu_170_p2 = (!j_0_reg_153.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_0_reg_153.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void cordic::thread_r_V_5_fu_200_p2() {
    r_V_5_fu_200_p2 = (!ap_const_lv25_0.is_01() || !zext_ln1118_fu_197_p1.read().is_01())? sc_lv<25>(): (sc_biguint<25>(ap_const_lv25_0) - sc_biguint<25>(zext_ln1118_fu_197_p1.read()));
}

void cordic::thread_r_V_6_fu_223_p2() {
    r_V_6_fu_223_p2 = (!ap_const_lv25_0.is_01() || !zext_ln1118_1_fu_220_p1.read().is_01())? sc_lv<25>(): (sc_biguint<25>(ap_const_lv25_0) - sc_biguint<25>(zext_ln1118_1_fu_220_p1.read()));
}

void cordic::thread_r_V_7_fu_323_p1() {
    r_V_7_fu_323_p1 =  (sc_lv<12>) (sext_ln1118_1_fu_193_p1.read());
}

void cordic::thread_r_V_8_fu_331_p0() {
    r_V_8_fu_331_p0 =  (sc_lv<12>) (sext_ln1118_1_fu_193_p1.read());
}

void cordic::thread_r_V_9_fu_319_p1() {
    r_V_9_fu_319_p1 = esl_sext<12,11>(trunc_ln_fu_309_p4.read());
}

void cordic::thread_s_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        s_V_ap_vld = ap_const_logic_1;
    } else {
        s_V_ap_vld = ap_const_logic_0;
    }
}

void cordic::thread_select_ln1495_fu_273_p3() {
    select_ln1495_fu_273_p3 = (!tmp_1_fu_181_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_181_p3.read()[0].to_bool())? add_ln703_fu_243_p2.read(): sub_ln703_fu_267_p2.read());
}

void cordic::thread_sext_ln1118_1_fu_193_p1() {
    sext_ln1118_1_fu_193_p1 = esl_sext<24,12>(factor_0_reg_115.read());
}

void cordic::thread_sin_shift_V_1_fu_258_p4() {
    sin_shift_V_1_fu_258_p4 = r_V_8_fu_331_p2.read().range(21, 10);
}

void cordic::thread_sin_shift_V_3_fu_289_p3() {
    sin_shift_V_3_fu_289_p3 = (!tmp_1_fu_181_p3.read()[0].is_01())? sc_lv<12>(): ((tmp_1_fu_181_p3.read()[0].to_bool())? sin_shift_V_fu_229_p4.read(): sin_shift_V_1_fu_258_p4.read());
}

void cordic::thread_sin_shift_V_fu_229_p4() {
    sin_shift_V_fu_229_p4 = r_V_6_fu_223_p2.read().range(21, 10);
}

void cordic::thread_sub_ln703_fu_267_p2() {
    sub_ln703_fu_267_p2 = (!p_Val2_4_reg_105.read().is_01() || !zext_ln1265_fu_239_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_Val2_4_reg_105.read()) - sc_biguint<12>(zext_ln1265_fu_239_p1.read()));
}

void cordic::thread_tmp_1_fu_181_p3() {
    tmp_1_fu_181_p3 = p_Val2_4_reg_105.read().range(11, 11);
}

void cordic::thread_trunc_ln_fu_309_p4() {
    trunc_ln_fu_309_p4 = factor_0_reg_115.read().range(11, 1);
}

void cordic::thread_zext_ln1118_1_fu_220_p1() {
    zext_ln1118_1_fu_220_p1 = esl_zext<25,24>(r_V_8_fu_331_p2.read());
}

void cordic::thread_zext_ln1118_fu_197_p1() {
    zext_ln1118_fu_197_p1 = esl_zext<25,24>(r_V_7_fu_323_p2.read());
}

void cordic::thread_zext_ln1265_fu_239_p1() {
    zext_ln1265_fu_239_p1 = esl_zext<12,10>(cordic_phase_V_q0.read());
}

void cordic::thread_zext_ln32_fu_176_p1() {
    zext_ln32_fu_176_p1 = esl_zext<64,6>(j_0_reg_153.read());
}

void cordic::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln18_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln18_fu_164_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void cordic::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

