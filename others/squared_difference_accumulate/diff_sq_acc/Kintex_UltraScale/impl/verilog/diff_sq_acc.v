// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="diff_sq_acc,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcku035-fbva676-1-i,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.187000,HLS_SYN_LAT=31,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=44,HLS_SYN_LUT=66,HLS_VERSION=2019_2}" *)

module diff_sq_acc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_V_address0,
        a_V_ce0,
        a_V_q0,
        b_V_address0,
        b_V_ce0,
        b_V_q0,
        dout_V,
        dout_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] a_V_address0;
output   a_V_ce0;
input  [15:0] a_V_q0;
output  [3:0] b_V_address0;
output   b_V_ce0;
input  [15:0] b_V_q0;
output  [47:0] dout_V;
output   dout_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_V_ce0;
reg b_V_ce0;
reg dout_V_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] i_fu_90_p2;
reg   [3:0] i_reg_126;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln38_fu_84_p2;
wire  signed [31:0] grp_fu_115_p3;
wire    ap_CS_fsm_state4;
reg   [3:0] i_0_reg_61;
reg  signed [31:0] val_assign_reg_72;
wire   [63:0] zext_ln42_fu_96_p1;
wire    ap_CS_fsm_state3;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

diff_sq_acc_ama_sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
diff_sq_acc_ama_sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_V_q0),
    .din1(b_V_q0),
    .din2(val_assign_reg_72),
    .ce(1'b1),
    .dout(grp_fu_115_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_61 <= i_reg_126;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_61 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        val_assign_reg_72 <= grp_fu_115_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        val_assign_reg_72 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_126 <= i_fu_90_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_V_ce0 = 1'b1;
    end else begin
        a_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_V_ce0 = 1'b1;
    end else begin
        b_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln38_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        dout_V_ap_vld = 1'b1;
    end else begin
        dout_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln38_fu_84_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_V_address0 = zext_ln42_fu_96_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign b_V_address0 = zext_ln42_fu_96_p1;

assign dout_V = $signed(val_assign_reg_72);

assign i_fu_90_p2 = (i_0_reg_61 + 4'd1);

assign icmp_ln38_fu_84_p2 = ((i_0_reg_61 == 4'd10) ? 1'b1 : 1'b0);

assign zext_ln42_fu_96_p1 = i_0_reg_61;

endmodule //diff_sq_acc
