// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _diff_sq_acc_HH_
#define _diff_sq_acc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "diff_sq_acc_ama_sbkb.h"

namespace ap_rtl {

struct diff_sq_acc : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > a_V_address0;
    sc_out< sc_logic > a_V_ce0;
    sc_in< sc_lv<16> > a_V_q0;
    sc_out< sc_lv<4> > b_V_address0;
    sc_out< sc_logic > b_V_ce0;
    sc_in< sc_lv<16> > b_V_q0;
    sc_out< sc_lv<48> > dout_V;
    sc_out< sc_logic > dout_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    diff_sq_acc(sc_module_name name);
    SC_HAS_PROCESS(diff_sq_acc);

    ~diff_sq_acc();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    diff_sq_acc_ama_sbkb<1,2,16,16,32,32>* diff_sq_acc_ama_sbkb_U1;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > i_fu_90_p2;
    sc_signal< sc_lv<4> > i_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln38_fu_84_p2;
    sc_signal< sc_lv<32> > grp_fu_115_p3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<4> > i_0_reg_61;
    sc_signal< sc_lv<32> > val_assign_reg_72;
    sc_signal< sc_lv<64> > zext_ln42_fu_96_p1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_V_address0();
    void thread_a_V_ce0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_b_V_address0();
    void thread_b_V_ce0();
    void thread_dout_V();
    void thread_dout_V_ap_vld();
    void thread_i_fu_90_p2();
    void thread_icmp_ln38_fu_84_p2();
    void thread_zext_ln42_fu_96_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
