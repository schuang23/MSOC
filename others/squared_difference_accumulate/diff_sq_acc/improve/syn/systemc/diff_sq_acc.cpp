// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "diff_sq_acc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic diff_sq_acc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic diff_sq_acc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> diff_sq_acc::ap_ST_fsm_state1 = "1";
const sc_lv<3> diff_sq_acc::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> diff_sq_acc::ap_ST_fsm_state7 = "100";
const sc_lv<32> diff_sq_acc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool diff_sq_acc::ap_const_boolean_1 = true;
const sc_lv<32> diff_sq_acc::ap_const_lv32_1 = "1";
const bool diff_sq_acc::ap_const_boolean_0 = false;
const sc_lv<1> diff_sq_acc::ap_const_lv1_0 = "0";
const sc_lv<1> diff_sq_acc::ap_const_lv1_1 = "1";
const sc_lv<4> diff_sq_acc::ap_const_lv4_0 = "0000";
const sc_lv<32> diff_sq_acc::ap_const_lv32_2 = "10";
const sc_lv<4> diff_sq_acc::ap_const_lv4_A = "1010";
const sc_lv<4> diff_sq_acc::ap_const_lv4_1 = "1";

diff_sq_acc::diff_sq_acc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    diff_sq_acc_mac_mbkb_U1 = new diff_sq_acc_mac_mbkb<1,3,17,17,32,32>("diff_sq_acc_mac_mbkb_U1");
    diff_sq_acc_mac_mbkb_U1->clk(ap_clk);
    diff_sq_acc_mac_mbkb_U1->reset(ap_rst);
    diff_sq_acc_mac_mbkb_U1->din0(grp_fu_135_p0);
    diff_sq_acc_mac_mbkb_U1->din1(grp_fu_135_p1);
    diff_sq_acc_mac_mbkb_U1->din2(val_assign_reg_84);
    diff_sq_acc_mac_mbkb_U1->ce(ap_var_for_const0);
    diff_sq_acc_mac_mbkb_U1->dout(grp_fu_135_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln42_fu_108_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_a_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( icmp_ln38_fu_96_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_b_V_address0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( zext_ln42_fu_108_p1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_b_V_ce0);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_dout_V);
    sensitive << ( val_assign_reg_84 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_dout_V_ap_vld);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_grp_fu_135_p0);
    sensitive << ( sext_ln44_fu_126_p1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_grp_fu_135_p1);
    sensitive << ( sext_ln44_fu_126_p1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_i_fu_102_p2);
    sensitive << ( i_0_reg_73 );

    SC_METHOD(thread_icmp_ln38_fu_96_p2);
    sensitive << ( i_0_reg_73 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_sext_ln42_fu_114_p1);
    sensitive << ( a_V_load_reg_162 );

    SC_METHOD(thread_sext_ln43_fu_117_p1);
    sensitive << ( b_V_load_reg_167 );

    SC_METHOD(thread_sext_ln44_fu_126_p1);
    sensitive << ( sub_fu_120_p2 );

    SC_METHOD(thread_sub_fu_120_p2);
    sensitive << ( sext_ln42_fu_114_p1 );
    sensitive << ( sext_ln43_fu_117_p1 );

    SC_METHOD(thread_zext_ln42_fu_108_p1);
    sensitive << ( i_0_reg_73 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln38_fu_96_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "diff_sq_acc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V_address0, "(port)a_V_address0");
    sc_trace(mVcdFile, a_V_ce0, "(port)a_V_ce0");
    sc_trace(mVcdFile, a_V_q0, "(port)a_V_q0");
    sc_trace(mVcdFile, b_V_address0, "(port)b_V_address0");
    sc_trace(mVcdFile, b_V_ce0, "(port)b_V_ce0");
    sc_trace(mVcdFile, b_V_q0, "(port)b_V_q0");
    sc_trace(mVcdFile, dout_V, "(port)dout_V");
    sc_trace(mVcdFile, dout_V_ap_vld, "(port)dout_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_0_reg_73, "i_0_reg_73");
    sc_trace(mVcdFile, val_assign_reg_84, "val_assign_reg_84");
    sc_trace(mVcdFile, icmp_ln38_fu_96_p2, "icmp_ln38_fu_96_p2");
    sc_trace(mVcdFile, icmp_ln38_reg_143, "icmp_ln38_reg_143");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, icmp_ln38_reg_143_pp0_iter1_reg, "icmp_ln38_reg_143_pp0_iter1_reg");
    sc_trace(mVcdFile, icmp_ln38_reg_143_pp0_iter2_reg, "icmp_ln38_reg_143_pp0_iter2_reg");
    sc_trace(mVcdFile, icmp_ln38_reg_143_pp0_iter3_reg, "icmp_ln38_reg_143_pp0_iter3_reg");
    sc_trace(mVcdFile, i_fu_102_p2, "i_fu_102_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, a_V_load_reg_162, "a_V_load_reg_162");
    sc_trace(mVcdFile, b_V_load_reg_167, "b_V_load_reg_167");
    sc_trace(mVcdFile, sext_ln44_fu_126_p1, "sext_ln44_fu_126_p1");
    sc_trace(mVcdFile, grp_fu_135_p3, "grp_fu_135_p3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, zext_ln42_fu_108_p1, "zext_ln42_fu_108_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, sext_ln42_fu_114_p1, "sext_ln42_fu_114_p1");
    sc_trace(mVcdFile, sext_ln43_fu_117_p1, "sext_ln43_fu_117_p1");
    sc_trace(mVcdFile, sub_fu_120_p2, "sub_fu_120_p2");
    sc_trace(mVcdFile, grp_fu_135_p0, "grp_fu_135_p0");
    sc_trace(mVcdFile, grp_fu_135_p1, "grp_fu_135_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("diff_sq_acc.hdltvin.dat");
    mHdltvoutHandle.open("diff_sq_acc.hdltvout.dat");
}

diff_sq_acc::~diff_sq_acc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete diff_sq_acc_mac_mbkb_U1;
}

void diff_sq_acc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void diff_sq_acc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter4 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(icmp_ln38_fu_96_p2.read(), ap_const_lv1_0))) {
        i_0_reg_73 = i_fu_102_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_73 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(icmp_ln38_reg_143_pp0_iter3_reg.read(), ap_const_lv1_0))) {
        val_assign_reg_84 = grp_fu_135_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        val_assign_reg_84 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln38_reg_143.read(), ap_const_lv1_0))) {
        a_V_load_reg_162 = a_V_q0.read();
        b_V_load_reg_167 = b_V_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        icmp_ln38_reg_143 = icmp_ln38_fu_96_p2.read();
        icmp_ln38_reg_143_pp0_iter1_reg = icmp_ln38_reg_143.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        icmp_ln38_reg_143_pp0_iter2_reg = icmp_ln38_reg_143_pp0_iter1_reg.read();
        icmp_ln38_reg_143_pp0_iter3_reg = icmp_ln38_reg_143_pp0_iter2_reg.read();
    }
}

void diff_sq_acc::thread_a_V_address0() {
    a_V_address0 =  (sc_lv<4>) (zext_ln42_fu_108_p1.read());
}

void diff_sq_acc::thread_a_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        a_V_ce0 = ap_const_logic_1;
    } else {
        a_V_ce0 = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void diff_sq_acc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void diff_sq_acc::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[2];
}

void diff_sq_acc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void diff_sq_acc::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(icmp_ln38_fu_96_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void diff_sq_acc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_b_V_address0() {
    b_V_address0 =  (sc_lv<4>) (zext_ln42_fu_108_p1.read());
}

void diff_sq_acc::thread_b_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()))) {
        b_V_ce0 = ap_const_logic_1;
    } else {
        b_V_ce0 = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_dout_V() {
    dout_V = esl_sext<48,32>(val_assign_reg_84.read());
}

void diff_sq_acc::thread_dout_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        dout_V_ap_vld = ap_const_logic_1;
    } else {
        dout_V_ap_vld = ap_const_logic_0;
    }
}

void diff_sq_acc::thread_grp_fu_135_p0() {
    grp_fu_135_p0 =  (sc_lv<17>) (sext_ln44_fu_126_p1.read());
}

void diff_sq_acc::thread_grp_fu_135_p1() {
    grp_fu_135_p1 =  (sc_lv<17>) (sext_ln44_fu_126_p1.read());
}

void diff_sq_acc::thread_i_fu_102_p2() {
    i_fu_102_p2 = (!i_0_reg_73.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_73.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void diff_sq_acc::thread_icmp_ln38_fu_96_p2() {
    icmp_ln38_fu_96_p2 = (!i_0_reg_73.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_73.read() == ap_const_lv4_A);
}

void diff_sq_acc::thread_sext_ln42_fu_114_p1() {
    sext_ln42_fu_114_p1 = esl_sext<17,16>(a_V_load_reg_162.read());
}

void diff_sq_acc::thread_sext_ln43_fu_117_p1() {
    sext_ln43_fu_117_p1 = esl_sext<17,16>(b_V_load_reg_167.read());
}

void diff_sq_acc::thread_sext_ln44_fu_126_p1() {
    sext_ln44_fu_126_p1 = esl_sext<32,17>(sub_fu_120_p2.read());
}

void diff_sq_acc::thread_sub_fu_120_p2() {
    sub_fu_120_p2 = (!sext_ln42_fu_114_p1.read().is_01() || !sext_ln43_fu_117_p1.read().is_01())? sc_lv<17>(): (sc_bigint<17>(sext_ln42_fu_114_p1.read()) - sc_bigint<17>(sext_ln43_fu_117_p1.read()));
}

void diff_sq_acc::thread_zext_ln42_fu_108_p1() {
    zext_ln42_fu_108_p1 = esl_zext<64,4>(i_0_reg_73.read());
}

void diff_sq_acc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(icmp_ln38_fu_96_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter3.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(icmp_ln38_fu_96_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void diff_sq_acc::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_address0\" :  \"" << a_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_V_ce0\" :  \"" << a_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V_q0\" :  \"" << a_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_address0\" :  \"" << b_V_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_V_ce0\" :  \"" << b_V_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V_q0\" :  \"" << b_V_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_V\" :  \"" << dout_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dout_V_ap_vld\" :  \"" << dout_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

