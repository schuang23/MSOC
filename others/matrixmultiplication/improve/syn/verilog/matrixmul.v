// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585t-ffg1761-2,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.108000,HLS_SYN_LAT=1033,HLS_SYN_TPT=none,HLS_SYN_MEM=116,HLS_SYN_DSP=96,HLS_SYN_FF=9508,HLS_SYN_LUT=3165,HLS_VERSION=2019_2}" *)

module matrixmul (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state11 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [4:0] A_address0;
reg    A_ce0;
wire   [1023:0] A_q0;
wire   [4:0] B_address0;
reg    B_ce0;
wire   [1023:0] B_q0;
wire   [9:0] AB_address0;
reg    AB_ce0;
reg    AB_we0;
wire   [31:0] AB_d0;
reg   [10:0] indvar_flatten_reg_233;
reg   [5:0] i_0_reg_244;
reg   [5:0] j_0_reg_255;
wire   [0:0] icmp_ln10_fu_266_p2;
reg   [0:0] icmp_ln10_reg_1243;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter5_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter6_reg;
reg   [0:0] icmp_ln10_reg_1243_pp0_iter7_reg;
wire   [10:0] add_ln10_fu_272_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln16_fu_290_p3;
reg   [5:0] select_ln16_reg_1252;
reg   [5:0] select_ln16_reg_1252_pp0_iter1_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter2_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter3_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter4_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter5_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter6_reg;
reg   [5:0] select_ln16_reg_1252_pp0_iter7_reg;
wire   [5:0] select_ln16_1_fu_298_p3;
reg   [5:0] select_ln16_1_reg_1257;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter1_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter2_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter3_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter4_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter5_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter6_reg;
reg   [5:0] select_ln16_1_reg_1257_pp0_iter7_reg;
wire   [5:0] j_fu_316_p2;
wire  signed [31:0] trunc_ln16_fu_322_p1;
reg  signed [31:0] trunc_ln16_reg_1278;
wire  signed [31:0] trunc_ln16_1_fu_326_p1;
reg  signed [31:0] trunc_ln16_1_reg_1283;
reg  signed [31:0] tmp_4_reg_1288;
reg  signed [31:0] tmp_5_reg_1293;
reg  signed [31:0] tmp_6_reg_1298;
reg  signed [31:0] tmp_7_reg_1303;
reg  signed [31:0] tmp_8_reg_1308;
reg  signed [31:0] tmp_9_reg_1313;
reg  signed [31:0] tmp_s_reg_1318;
reg  signed [31:0] tmp_2_reg_1323;
reg  signed [31:0] tmp_3_reg_1328;
reg  signed [31:0] tmp_10_reg_1333;
reg  signed [31:0] tmp_11_reg_1338;
reg  signed [31:0] tmp_12_reg_1343;
reg  signed [31:0] tmp_13_reg_1348;
reg  signed [31:0] tmp_14_reg_1353;
reg  signed [31:0] tmp_15_reg_1358;
reg  signed [31:0] tmp_16_reg_1363;
reg  signed [31:0] tmp_17_reg_1368;
reg  signed [31:0] tmp_18_reg_1373;
reg  signed [31:0] tmp_19_reg_1378;
reg  signed [31:0] tmp_20_reg_1383;
reg  signed [31:0] tmp_21_reg_1388;
reg  signed [31:0] tmp_22_reg_1393;
reg  signed [31:0] tmp_23_reg_1398;
reg  signed [31:0] tmp_24_reg_1403;
reg  signed [31:0] tmp_25_reg_1408;
reg  signed [31:0] tmp_26_reg_1413;
reg  signed [31:0] tmp_27_reg_1418;
reg  signed [31:0] tmp_28_reg_1423;
reg  signed [31:0] tmp_29_reg_1428;
reg  signed [31:0] tmp_30_reg_1433;
reg  signed [31:0] tmp_31_reg_1438;
reg  signed [31:0] tmp_32_reg_1443;
reg  signed [31:0] tmp_33_reg_1448;
reg  signed [31:0] tmp_34_reg_1453;
reg  signed [31:0] tmp_35_reg_1458;
reg  signed [31:0] tmp_36_reg_1463;
reg  signed [31:0] tmp_37_reg_1468;
reg  signed [31:0] tmp_38_reg_1473;
reg  signed [31:0] tmp_39_reg_1478;
reg  signed [31:0] tmp_40_reg_1483;
reg  signed [31:0] tmp_41_reg_1488;
reg  signed [31:0] tmp_42_reg_1493;
reg  signed [31:0] tmp_43_reg_1498;
reg  signed [31:0] tmp_44_reg_1503;
reg  signed [31:0] tmp_45_reg_1508;
reg  signed [31:0] tmp_46_reg_1513;
reg  signed [31:0] tmp_47_reg_1518;
reg  signed [31:0] tmp_48_reg_1523;
reg  signed [31:0] tmp_49_reg_1528;
reg  signed [31:0] tmp_50_reg_1533;
reg  signed [31:0] tmp_51_reg_1538;
reg  signed [31:0] tmp_52_reg_1543;
reg  signed [31:0] tmp_53_reg_1548;
reg  signed [31:0] tmp_54_reg_1553;
reg  signed [31:0] tmp_55_reg_1558;
reg  signed [31:0] tmp_56_reg_1563;
reg  signed [31:0] tmp_57_reg_1568;
reg  signed [31:0] tmp_58_reg_1573;
reg  signed [31:0] tmp_59_reg_1578;
reg  signed [31:0] tmp_60_reg_1583;
reg  signed [31:0] tmp_61_reg_1588;
reg  signed [31:0] tmp_62_reg_1593;
wire   [31:0] grp_fu_950_p2;
reg   [31:0] mul_ln16_reg_1598;
wire   [31:0] grp_fu_954_p2;
reg   [31:0] mul_ln16_1_reg_1603;
wire   [31:0] grp_fu_958_p2;
reg   [31:0] mul_ln16_2_reg_1608;
wire   [31:0] grp_fu_962_p2;
reg   [31:0] mul_ln16_3_reg_1613;
wire   [31:0] grp_fu_966_p2;
reg   [31:0] mul_ln16_4_reg_1618;
wire   [31:0] grp_fu_970_p2;
reg   [31:0] mul_ln16_5_reg_1623;
wire   [31:0] grp_fu_974_p2;
reg   [31:0] mul_ln16_6_reg_1628;
wire   [31:0] grp_fu_978_p2;
reg   [31:0] mul_ln16_7_reg_1633;
wire   [31:0] grp_fu_982_p2;
reg   [31:0] mul_ln16_8_reg_1638;
wire   [31:0] grp_fu_986_p2;
reg   [31:0] mul_ln16_9_reg_1643;
wire   [31:0] grp_fu_990_p2;
reg   [31:0] mul_ln16_10_reg_1648;
wire   [31:0] grp_fu_994_p2;
reg   [31:0] mul_ln16_11_reg_1653;
wire   [31:0] grp_fu_998_p2;
reg   [31:0] mul_ln16_12_reg_1658;
wire   [31:0] grp_fu_1002_p2;
reg   [31:0] mul_ln16_13_reg_1663;
wire   [31:0] grp_fu_1006_p2;
reg   [31:0] mul_ln16_14_reg_1668;
wire   [31:0] grp_fu_1010_p2;
reg   [31:0] mul_ln16_15_reg_1673;
wire   [31:0] grp_fu_1014_p2;
reg   [31:0] mul_ln16_16_reg_1678;
wire   [31:0] grp_fu_1018_p2;
reg   [31:0] mul_ln16_17_reg_1683;
wire   [31:0] grp_fu_1022_p2;
reg   [31:0] mul_ln16_18_reg_1688;
wire   [31:0] grp_fu_1026_p2;
reg   [31:0] mul_ln16_19_reg_1693;
wire   [31:0] grp_fu_1030_p2;
reg   [31:0] mul_ln16_20_reg_1698;
wire   [31:0] grp_fu_1034_p2;
reg   [31:0] mul_ln16_21_reg_1703;
wire   [31:0] grp_fu_1038_p2;
reg   [31:0] mul_ln16_22_reg_1708;
wire   [31:0] grp_fu_1042_p2;
reg   [31:0] mul_ln16_23_reg_1713;
wire   [31:0] grp_fu_1046_p2;
reg   [31:0] mul_ln16_24_reg_1718;
wire   [31:0] grp_fu_1050_p2;
reg   [31:0] mul_ln16_25_reg_1723;
wire   [31:0] grp_fu_1054_p2;
reg   [31:0] mul_ln16_26_reg_1728;
wire   [31:0] grp_fu_1058_p2;
reg   [31:0] mul_ln16_27_reg_1733;
wire   [31:0] grp_fu_1062_p2;
reg   [31:0] mul_ln16_28_reg_1738;
wire   [31:0] grp_fu_1066_p2;
reg   [31:0] mul_ln16_29_reg_1743;
wire   [31:0] grp_fu_1070_p2;
reg   [31:0] mul_ln16_30_reg_1748;
wire   [31:0] grp_fu_1074_p2;
reg   [31:0] mul_ln16_31_reg_1753;
wire   [31:0] add_ln16_2_fu_1086_p2;
reg   [31:0] add_ln16_2_reg_1758;
wire   [31:0] add_ln16_3_fu_1092_p2;
reg   [31:0] add_ln16_3_reg_1763;
wire   [31:0] add_ln16_4_fu_1096_p2;
reg   [31:0] add_ln16_4_reg_1768;
wire   [31:0] add_ln16_9_fu_1108_p2;
reg   [31:0] add_ln16_9_reg_1773;
reg   [31:0] add_ln16_9_reg_1773_pp0_iter6_reg;
wire   [31:0] add_ln16_12_fu_1122_p2;
reg   [31:0] add_ln16_12_reg_1778;
reg   [31:0] add_ln16_12_reg_1778_pp0_iter6_reg;
wire   [31:0] add_ln16_17_fu_1136_p2;
reg   [31:0] add_ln16_17_reg_1783;
wire   [31:0] add_ln16_18_fu_1142_p2;
reg   [31:0] add_ln16_18_reg_1788;
wire   [31:0] add_ln16_19_fu_1146_p2;
reg   [31:0] add_ln16_19_reg_1793;
wire   [31:0] add_ln16_24_fu_1158_p2;
reg   [31:0] add_ln16_24_reg_1798;
wire   [31:0] add_ln16_25_fu_1164_p2;
reg   [31:0] add_ln16_25_reg_1803;
wire   [31:0] add_ln16_26_fu_1168_p2;
reg   [31:0] add_ln16_26_reg_1808;
wire   [31:0] add_ln16_6_fu_1176_p2;
reg   [31:0] add_ln16_6_reg_1813;
wire   [31:0] add_ln16_21_fu_1185_p2;
reg   [31:0] add_ln16_21_reg_1818;
reg   [31:0] add_ln16_21_reg_1818_pp0_iter7_reg;
wire   [31:0] add_ln16_28_fu_1194_p2;
reg   [31:0] add_ln16_28_reg_1823;
reg   [31:0] add_ln16_28_reg_1823_pp0_iter7_reg;
wire   [31:0] add_ln16_14_fu_1203_p2;
reg   [31:0] add_ln16_14_reg_1828;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg   [5:0] ap_phi_mux_i_0_phi_fu_248_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_fu_306_p1;
wire   [63:0] zext_ln16_1_fu_311_p1;
wire   [63:0] zext_ln18_1_fu_1228_p1;
wire   [0:0] icmp_ln11_fu_284_p2;
wire   [5:0] i_fu_278_p2;
wire   [31:0] add_ln16_fu_1078_p2;
wire   [31:0] add_ln16_1_fu_1082_p2;
wire   [31:0] add_ln16_7_fu_1100_p2;
wire   [31:0] add_ln16_8_fu_1104_p2;
wire   [31:0] add_ln16_10_fu_1114_p2;
wire   [31:0] add_ln16_11_fu_1118_p2;
wire   [31:0] add_ln16_15_fu_1128_p2;
wire   [31:0] add_ln16_16_fu_1132_p2;
wire   [31:0] add_ln16_22_fu_1150_p2;
wire   [31:0] add_ln16_23_fu_1154_p2;
wire   [31:0] add_ln16_5_fu_1172_p2;
wire   [31:0] add_ln16_20_fu_1181_p2;
wire   [31:0] add_ln16_27_fu_1190_p2;
wire   [31:0] add_ln16_13_fu_1199_p2;
wire   [10:0] tmp_fu_1208_p3;
wire   [11:0] zext_ln11_fu_1215_p1;
wire   [11:0] zext_ln18_fu_1219_p1;
wire   [11:0] add_ln18_fu_1222_p2;
wire   [31:0] add_ln16_29_fu_1233_p2;
wire    ap_CS_fsm_state11;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
end

matrixmul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixmul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .A_address0(A_address0),
    .A_ce0(A_ce0),
    .A_q0(A_q0),
    .B_address0(B_address0),
    .B_ce0(B_ce0),
    .B_q0(B_q0),
    .AB_address0(AB_address0),
    .AB_ce0(AB_ce0),
    .AB_we0(AB_we0),
    .AB_d0(AB_d0)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln16_1_reg_1283),
    .din1(trunc_ln16_reg_1278),
    .ce(1'b1),
    .dout(grp_fu_950_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_5_reg_1293),
    .din1(tmp_4_reg_1288),
    .ce(1'b1),
    .dout(grp_fu_954_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_reg_1303),
    .din1(tmp_6_reg_1298),
    .ce(1'b1),
    .dout(grp_fu_958_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_9_reg_1313),
    .din1(tmp_8_reg_1308),
    .ce(1'b1),
    .dout(grp_fu_962_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_1323),
    .din1(tmp_s_reg_1318),
    .ce(1'b1),
    .dout(grp_fu_966_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_10_reg_1333),
    .din1(tmp_3_reg_1328),
    .ce(1'b1),
    .dout(grp_fu_970_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_12_reg_1343),
    .din1(tmp_11_reg_1338),
    .ce(1'b1),
    .dout(grp_fu_974_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_14_reg_1353),
    .din1(tmp_13_reg_1348),
    .ce(1'b1),
    .dout(grp_fu_978_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_16_reg_1363),
    .din1(tmp_15_reg_1358),
    .ce(1'b1),
    .dout(grp_fu_982_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_18_reg_1373),
    .din1(tmp_17_reg_1368),
    .ce(1'b1),
    .dout(grp_fu_986_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_20_reg_1383),
    .din1(tmp_19_reg_1378),
    .ce(1'b1),
    .dout(grp_fu_990_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_22_reg_1393),
    .din1(tmp_21_reg_1388),
    .ce(1'b1),
    .dout(grp_fu_994_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_24_reg_1403),
    .din1(tmp_23_reg_1398),
    .ce(1'b1),
    .dout(grp_fu_998_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_26_reg_1413),
    .din1(tmp_25_reg_1408),
    .ce(1'b1),
    .dout(grp_fu_1002_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_28_reg_1423),
    .din1(tmp_27_reg_1418),
    .ce(1'b1),
    .dout(grp_fu_1006_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_30_reg_1433),
    .din1(tmp_29_reg_1428),
    .ce(1'b1),
    .dout(grp_fu_1010_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_32_reg_1443),
    .din1(tmp_31_reg_1438),
    .ce(1'b1),
    .dout(grp_fu_1014_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_34_reg_1453),
    .din1(tmp_33_reg_1448),
    .ce(1'b1),
    .dout(grp_fu_1018_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_36_reg_1463),
    .din1(tmp_35_reg_1458),
    .ce(1'b1),
    .dout(grp_fu_1022_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_38_reg_1473),
    .din1(tmp_37_reg_1468),
    .ce(1'b1),
    .dout(grp_fu_1026_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_40_reg_1483),
    .din1(tmp_39_reg_1478),
    .ce(1'b1),
    .dout(grp_fu_1030_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_42_reg_1493),
    .din1(tmp_41_reg_1488),
    .ce(1'b1),
    .dout(grp_fu_1034_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_44_reg_1503),
    .din1(tmp_43_reg_1498),
    .ce(1'b1),
    .dout(grp_fu_1038_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_46_reg_1513),
    .din1(tmp_45_reg_1508),
    .ce(1'b1),
    .dout(grp_fu_1042_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_48_reg_1523),
    .din1(tmp_47_reg_1518),
    .ce(1'b1),
    .dout(grp_fu_1046_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_50_reg_1533),
    .din1(tmp_49_reg_1528),
    .ce(1'b1),
    .dout(grp_fu_1050_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_52_reg_1543),
    .din1(tmp_51_reg_1538),
    .ce(1'b1),
    .dout(grp_fu_1054_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_54_reg_1553),
    .din1(tmp_53_reg_1548),
    .ce(1'b1),
    .dout(grp_fu_1058_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_56_reg_1563),
    .din1(tmp_55_reg_1558),
    .ce(1'b1),
    .dout(grp_fu_1062_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_58_reg_1573),
    .din1(tmp_57_reg_1568),
    .ce(1'b1),
    .dout(grp_fu_1066_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_60_reg_1583),
    .din1(tmp_59_reg_1578),
    .ce(1'b1),
    .dout(grp_fu_1070_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_62_reg_1593),
    .din1(tmp_61_reg_1588),
    .ce(1'b1),
    .dout(grp_fu_1074_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter8 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_244 <= select_ln16_1_reg_1257;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_244 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_reg_233 <= add_ln10_fu_272_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_233 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        j_0_reg_255 <= j_fu_316_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_255 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243_pp0_iter4_reg == 1'd0))) begin
        add_ln16_12_reg_1778 <= add_ln16_12_fu_1122_p2;
        add_ln16_17_reg_1783 <= add_ln16_17_fu_1136_p2;
        add_ln16_18_reg_1788 <= add_ln16_18_fu_1142_p2;
        add_ln16_19_reg_1793 <= add_ln16_19_fu_1146_p2;
        add_ln16_24_reg_1798 <= add_ln16_24_fu_1158_p2;
        add_ln16_25_reg_1803 <= add_ln16_25_fu_1164_p2;
        add_ln16_26_reg_1808 <= add_ln16_26_fu_1168_p2;
        add_ln16_2_reg_1758 <= add_ln16_2_fu_1086_p2;
        add_ln16_3_reg_1763 <= add_ln16_3_fu_1092_p2;
        add_ln16_4_reg_1768 <= add_ln16_4_fu_1096_p2;
        add_ln16_9_reg_1773 <= add_ln16_9_fu_1108_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln16_12_reg_1778_pp0_iter6_reg <= add_ln16_12_reg_1778;
        add_ln16_21_reg_1818_pp0_iter7_reg <= add_ln16_21_reg_1818;
        add_ln16_28_reg_1823_pp0_iter7_reg <= add_ln16_28_reg_1823;
        add_ln16_9_reg_1773_pp0_iter6_reg <= add_ln16_9_reg_1773;
        icmp_ln10_reg_1243_pp0_iter2_reg <= icmp_ln10_reg_1243_pp0_iter1_reg;
        icmp_ln10_reg_1243_pp0_iter3_reg <= icmp_ln10_reg_1243_pp0_iter2_reg;
        icmp_ln10_reg_1243_pp0_iter4_reg <= icmp_ln10_reg_1243_pp0_iter3_reg;
        icmp_ln10_reg_1243_pp0_iter5_reg <= icmp_ln10_reg_1243_pp0_iter4_reg;
        icmp_ln10_reg_1243_pp0_iter6_reg <= icmp_ln10_reg_1243_pp0_iter5_reg;
        icmp_ln10_reg_1243_pp0_iter7_reg <= icmp_ln10_reg_1243_pp0_iter6_reg;
        select_ln16_1_reg_1257_pp0_iter2_reg <= select_ln16_1_reg_1257_pp0_iter1_reg;
        select_ln16_1_reg_1257_pp0_iter3_reg <= select_ln16_1_reg_1257_pp0_iter2_reg;
        select_ln16_1_reg_1257_pp0_iter4_reg <= select_ln16_1_reg_1257_pp0_iter3_reg;
        select_ln16_1_reg_1257_pp0_iter5_reg <= select_ln16_1_reg_1257_pp0_iter4_reg;
        select_ln16_1_reg_1257_pp0_iter6_reg <= select_ln16_1_reg_1257_pp0_iter5_reg;
        select_ln16_1_reg_1257_pp0_iter7_reg <= select_ln16_1_reg_1257_pp0_iter6_reg;
        select_ln16_reg_1252_pp0_iter2_reg <= select_ln16_reg_1252_pp0_iter1_reg;
        select_ln16_reg_1252_pp0_iter3_reg <= select_ln16_reg_1252_pp0_iter2_reg;
        select_ln16_reg_1252_pp0_iter4_reg <= select_ln16_reg_1252_pp0_iter3_reg;
        select_ln16_reg_1252_pp0_iter5_reg <= select_ln16_reg_1252_pp0_iter4_reg;
        select_ln16_reg_1252_pp0_iter6_reg <= select_ln16_reg_1252_pp0_iter5_reg;
        select_ln16_reg_1252_pp0_iter7_reg <= select_ln16_reg_1252_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243_pp0_iter6_reg == 1'd0))) begin
        add_ln16_14_reg_1828 <= add_ln16_14_fu_1203_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243_pp0_iter5_reg == 1'd0))) begin
        add_ln16_21_reg_1818 <= add_ln16_21_fu_1185_p2;
        add_ln16_28_reg_1823 <= add_ln16_28_fu_1194_p2;
        add_ln16_6_reg_1813 <= add_ln16_6_fu_1176_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_1243 <= icmp_ln10_fu_266_p2;
        icmp_ln10_reg_1243_pp0_iter1_reg <= icmp_ln10_reg_1243;
        select_ln16_1_reg_1257_pp0_iter1_reg <= select_ln16_1_reg_1257;
        select_ln16_reg_1252_pp0_iter1_reg <= select_ln16_reg_1252;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243_pp0_iter3_reg == 1'd0))) begin
        mul_ln16_10_reg_1648 <= grp_fu_990_p2;
        mul_ln16_11_reg_1653 <= grp_fu_994_p2;
        mul_ln16_12_reg_1658 <= grp_fu_998_p2;
        mul_ln16_13_reg_1663 <= grp_fu_1002_p2;
        mul_ln16_14_reg_1668 <= grp_fu_1006_p2;
        mul_ln16_15_reg_1673 <= grp_fu_1010_p2;
        mul_ln16_16_reg_1678 <= grp_fu_1014_p2;
        mul_ln16_17_reg_1683 <= grp_fu_1018_p2;
        mul_ln16_18_reg_1688 <= grp_fu_1022_p2;
        mul_ln16_19_reg_1693 <= grp_fu_1026_p2;
        mul_ln16_1_reg_1603 <= grp_fu_954_p2;
        mul_ln16_20_reg_1698 <= grp_fu_1030_p2;
        mul_ln16_21_reg_1703 <= grp_fu_1034_p2;
        mul_ln16_22_reg_1708 <= grp_fu_1038_p2;
        mul_ln16_23_reg_1713 <= grp_fu_1042_p2;
        mul_ln16_24_reg_1718 <= grp_fu_1046_p2;
        mul_ln16_25_reg_1723 <= grp_fu_1050_p2;
        mul_ln16_26_reg_1728 <= grp_fu_1054_p2;
        mul_ln16_27_reg_1733 <= grp_fu_1058_p2;
        mul_ln16_28_reg_1738 <= grp_fu_1062_p2;
        mul_ln16_29_reg_1743 <= grp_fu_1066_p2;
        mul_ln16_2_reg_1608 <= grp_fu_958_p2;
        mul_ln16_30_reg_1748 <= grp_fu_1070_p2;
        mul_ln16_31_reg_1753 <= grp_fu_1074_p2;
        mul_ln16_3_reg_1613 <= grp_fu_962_p2;
        mul_ln16_4_reg_1618 <= grp_fu_966_p2;
        mul_ln16_5_reg_1623 <= grp_fu_970_p2;
        mul_ln16_6_reg_1628 <= grp_fu_974_p2;
        mul_ln16_7_reg_1633 <= grp_fu_978_p2;
        mul_ln16_8_reg_1638 <= grp_fu_982_p2;
        mul_ln16_9_reg_1643 <= grp_fu_986_p2;
        mul_ln16_reg_1598 <= grp_fu_950_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln16_1_reg_1257 <= select_ln16_1_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln16_reg_1252 <= select_ln16_fu_290_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_1243 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_10_reg_1333 <= {{B_q0[191:160]}};
        tmp_11_reg_1338 <= {{A_q0[223:192]}};
        tmp_12_reg_1343 <= {{B_q0[223:192]}};
        tmp_13_reg_1348 <= {{A_q0[255:224]}};
        tmp_14_reg_1353 <= {{B_q0[255:224]}};
        tmp_15_reg_1358 <= {{A_q0[287:256]}};
        tmp_16_reg_1363 <= {{B_q0[287:256]}};
        tmp_17_reg_1368 <= {{A_q0[319:288]}};
        tmp_18_reg_1373 <= {{B_q0[319:288]}};
        tmp_19_reg_1378 <= {{A_q0[351:320]}};
        tmp_20_reg_1383 <= {{B_q0[351:320]}};
        tmp_21_reg_1388 <= {{A_q0[383:352]}};
        tmp_22_reg_1393 <= {{B_q0[383:352]}};
        tmp_23_reg_1398 <= {{A_q0[415:384]}};
        tmp_24_reg_1403 <= {{B_q0[415:384]}};
        tmp_25_reg_1408 <= {{A_q0[447:416]}};
        tmp_26_reg_1413 <= {{B_q0[447:416]}};
        tmp_27_reg_1418 <= {{A_q0[479:448]}};
        tmp_28_reg_1423 <= {{B_q0[479:448]}};
        tmp_29_reg_1428 <= {{A_q0[511:480]}};
        tmp_2_reg_1323 <= {{B_q0[159:128]}};
        tmp_30_reg_1433 <= {{B_q0[511:480]}};
        tmp_31_reg_1438 <= {{A_q0[543:512]}};
        tmp_32_reg_1443 <= {{B_q0[543:512]}};
        tmp_33_reg_1448 <= {{A_q0[575:544]}};
        tmp_34_reg_1453 <= {{B_q0[575:544]}};
        tmp_35_reg_1458 <= {{A_q0[607:576]}};
        tmp_36_reg_1463 <= {{B_q0[607:576]}};
        tmp_37_reg_1468 <= {{A_q0[639:608]}};
        tmp_38_reg_1473 <= {{B_q0[639:608]}};
        tmp_39_reg_1478 <= {{A_q0[671:640]}};
        tmp_3_reg_1328 <= {{A_q0[191:160]}};
        tmp_40_reg_1483 <= {{B_q0[671:640]}};
        tmp_41_reg_1488 <= {{A_q0[703:672]}};
        tmp_42_reg_1493 <= {{B_q0[703:672]}};
        tmp_43_reg_1498 <= {{A_q0[735:704]}};
        tmp_44_reg_1503 <= {{B_q0[735:704]}};
        tmp_45_reg_1508 <= {{A_q0[767:736]}};
        tmp_46_reg_1513 <= {{B_q0[767:736]}};
        tmp_47_reg_1518 <= {{A_q0[799:768]}};
        tmp_48_reg_1523 <= {{B_q0[799:768]}};
        tmp_49_reg_1528 <= {{A_q0[831:800]}};
        tmp_4_reg_1288 <= {{A_q0[63:32]}};
        tmp_50_reg_1533 <= {{B_q0[831:800]}};
        tmp_51_reg_1538 <= {{A_q0[863:832]}};
        tmp_52_reg_1543 <= {{B_q0[863:832]}};
        tmp_53_reg_1548 <= {{A_q0[895:864]}};
        tmp_54_reg_1553 <= {{B_q0[895:864]}};
        tmp_55_reg_1558 <= {{A_q0[927:896]}};
        tmp_56_reg_1563 <= {{B_q0[927:896]}};
        tmp_57_reg_1568 <= {{A_q0[959:928]}};
        tmp_58_reg_1573 <= {{B_q0[959:928]}};
        tmp_59_reg_1578 <= {{A_q0[991:960]}};
        tmp_5_reg_1293 <= {{B_q0[63:32]}};
        tmp_60_reg_1583 <= {{B_q0[991:960]}};
        tmp_61_reg_1588 <= {{A_q0[1023:992]}};
        tmp_62_reg_1593 <= {{B_q0[1023:992]}};
        tmp_6_reg_1298 <= {{A_q0[95:64]}};
        tmp_7_reg_1303 <= {{B_q0[95:64]}};
        tmp_8_reg_1308 <= {{A_q0[127:96]}};
        tmp_9_reg_1313 <= {{B_q0[127:96]}};
        tmp_s_reg_1318 <= {{A_q0[159:128]}};
        trunc_ln16_1_reg_1283 <= trunc_ln16_1_fu_326_p1;
        trunc_ln16_reg_1278 <= trunc_ln16_fu_322_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (icmp_ln10_reg_1243_pp0_iter7_reg == 1'd0))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_266_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1243 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_248_p4 = select_ln16_1_reg_1257;
    end else begin
        ap_phi_mux_i_0_phi_fu_248_p4 = i_0_reg_244;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter8 == 1'b1)) | ((icmp_ln10_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = zext_ln18_1_fu_1228_p1;

assign AB_d0 = (add_ln16_14_reg_1828 + add_ln16_29_fu_1233_p2);

assign A_address0 = zext_ln16_fu_306_p1;

assign B_address0 = zext_ln16_1_fu_311_p1;

assign add_ln10_fu_272_p2 = (indvar_flatten_reg_233 + 11'd1);

assign add_ln16_10_fu_1114_p2 = (mul_ln16_13_reg_1663 + mul_ln16_12_reg_1658);

assign add_ln16_11_fu_1118_p2 = (mul_ln16_15_reg_1673 + mul_ln16_14_reg_1668);

assign add_ln16_12_fu_1122_p2 = (add_ln16_10_fu_1114_p2 + add_ln16_11_fu_1118_p2);

assign add_ln16_13_fu_1199_p2 = (add_ln16_9_reg_1773_pp0_iter6_reg + add_ln16_12_reg_1778_pp0_iter6_reg);

assign add_ln16_14_fu_1203_p2 = (add_ln16_6_reg_1813 + add_ln16_13_fu_1199_p2);

assign add_ln16_15_fu_1128_p2 = (mul_ln16_17_reg_1683 + mul_ln16_16_reg_1678);

assign add_ln16_16_fu_1132_p2 = (mul_ln16_19_reg_1693 + mul_ln16_18_reg_1688);

assign add_ln16_17_fu_1136_p2 = (add_ln16_15_fu_1128_p2 + add_ln16_16_fu_1132_p2);

assign add_ln16_18_fu_1142_p2 = (mul_ln16_21_reg_1703 + mul_ln16_20_reg_1698);

assign add_ln16_19_fu_1146_p2 = (mul_ln16_23_reg_1713 + mul_ln16_22_reg_1708);

assign add_ln16_1_fu_1082_p2 = (mul_ln16_3_reg_1613 + mul_ln16_2_reg_1608);

assign add_ln16_20_fu_1181_p2 = (add_ln16_18_reg_1788 + add_ln16_19_reg_1793);

assign add_ln16_21_fu_1185_p2 = (add_ln16_17_reg_1783 + add_ln16_20_fu_1181_p2);

assign add_ln16_22_fu_1150_p2 = (mul_ln16_25_reg_1723 + mul_ln16_24_reg_1718);

assign add_ln16_23_fu_1154_p2 = (mul_ln16_27_reg_1733 + mul_ln16_26_reg_1728);

assign add_ln16_24_fu_1158_p2 = (add_ln16_22_fu_1150_p2 + add_ln16_23_fu_1154_p2);

assign add_ln16_25_fu_1164_p2 = (mul_ln16_29_reg_1743 + mul_ln16_28_reg_1738);

assign add_ln16_26_fu_1168_p2 = (mul_ln16_31_reg_1753 + mul_ln16_30_reg_1748);

assign add_ln16_27_fu_1190_p2 = (add_ln16_25_reg_1803 + add_ln16_26_reg_1808);

assign add_ln16_28_fu_1194_p2 = (add_ln16_24_reg_1798 + add_ln16_27_fu_1190_p2);

assign add_ln16_29_fu_1233_p2 = (add_ln16_21_reg_1818_pp0_iter7_reg + add_ln16_28_reg_1823_pp0_iter7_reg);

assign add_ln16_2_fu_1086_p2 = (add_ln16_fu_1078_p2 + add_ln16_1_fu_1082_p2);

assign add_ln16_3_fu_1092_p2 = (mul_ln16_5_reg_1623 + mul_ln16_4_reg_1618);

assign add_ln16_4_fu_1096_p2 = (mul_ln16_7_reg_1633 + mul_ln16_6_reg_1628);

assign add_ln16_5_fu_1172_p2 = (add_ln16_3_reg_1763 + add_ln16_4_reg_1768);

assign add_ln16_6_fu_1176_p2 = (add_ln16_2_reg_1758 + add_ln16_5_fu_1172_p2);

assign add_ln16_7_fu_1100_p2 = (mul_ln16_9_reg_1643 + mul_ln16_8_reg_1638);

assign add_ln16_8_fu_1104_p2 = (mul_ln16_11_reg_1653 + mul_ln16_10_reg_1648);

assign add_ln16_9_fu_1108_p2 = (add_ln16_7_fu_1100_p2 + add_ln16_8_fu_1104_p2);

assign add_ln16_fu_1078_p2 = (mul_ln16_1_reg_1603 + mul_ln16_reg_1598);

assign add_ln18_fu_1222_p2 = (zext_ln11_fu_1215_p1 + zext_ln18_fu_1219_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_278_p2 = (6'd1 + ap_phi_mux_i_0_phi_fu_248_p4);

assign icmp_ln10_fu_266_p2 = ((indvar_flatten_reg_233 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_284_p2 = ((j_0_reg_255 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_316_p2 = (6'd1 + select_ln16_fu_290_p3);

assign select_ln16_1_fu_298_p3 = ((icmp_ln11_fu_284_p2[0:0] === 1'b1) ? i_fu_278_p2 : ap_phi_mux_i_0_phi_fu_248_p4);

assign select_ln16_fu_290_p3 = ((icmp_ln11_fu_284_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_255);

assign tmp_fu_1208_p3 = {{select_ln16_1_reg_1257_pp0_iter7_reg}, {5'd0}};

assign trunc_ln16_1_fu_326_p1 = B_q0[31:0];

assign trunc_ln16_fu_322_p1 = A_q0[31:0];

assign zext_ln11_fu_1215_p1 = tmp_fu_1208_p3;

assign zext_ln16_1_fu_311_p1 = select_ln16_fu_290_p3;

assign zext_ln16_fu_306_p1 = select_ln16_1_fu_298_p3;

assign zext_ln18_1_fu_1228_p1 = add_ln18_fu_1222_p2;

assign zext_ln18_fu_1219_p1 = select_ln16_reg_1252_pp0_iter7_reg;

endmodule //matrixmul
