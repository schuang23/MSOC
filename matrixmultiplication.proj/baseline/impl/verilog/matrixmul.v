// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.205000,HLS_SYN_LAT=264257,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=3,HLS_SYN_FF=688,HLS_SYN_LUT=493,HLS_VERSION=2019_2}" *)

module matrixmul (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_state3 = 11'd4;
parameter    ap_ST_fsm_state4 = 11'd8;
parameter    ap_ST_fsm_state5 = 11'd16;
parameter    ap_ST_fsm_state6 = 11'd32;
parameter    ap_ST_fsm_state7 = 11'd64;
parameter    ap_ST_fsm_state8 = 11'd128;
parameter    ap_ST_fsm_state9 = 11'd256;
parameter    ap_ST_fsm_state10 = 11'd512;
parameter    ap_ST_fsm_state11 = 11'd1024;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [9:0] A_address0;
reg    A_ce0;
wire   [31:0] A_q0;
wire   [9:0] B_address0;
reg    B_ce0;
wire   [31:0] B_q0;
reg    AB_ce0;
reg    AB_we0;
wire   [5:0] i_fu_150_p2;
reg   [5:0] i_reg_254;
wire    ap_CS_fsm_state2;
wire   [11:0] zext_ln11_fu_164_p1;
reg   [11:0] zext_ln11_reg_259;
wire   [0:0] icmp_ln10_fu_144_p2;
wire   [5:0] j_fu_174_p2;
reg   [5:0] j_reg_268;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln18_fu_180_p1;
reg   [11:0] zext_ln18_reg_273;
wire   [0:0] icmp_ln11_fu_168_p2;
reg   [9:0] AB_addr_reg_278;
wire   [5:0] k_fu_200_p2;
reg   [5:0] k_reg_286;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln15_fu_194_p2;
reg  signed [31:0] A_load_reg_301;
wire    ap_CS_fsm_state5;
reg  signed [31:0] B_load_reg_306;
wire   [31:0] grp_fu_242_p2;
reg   [31:0] mul_ln16_reg_311;
wire    ap_CS_fsm_state10;
wire   [31:0] ABij_fu_246_p2;
wire    ap_CS_fsm_state11;
reg   [5:0] i_0_reg_98;
reg   [5:0] j_0_reg_109;
reg   [31:0] ABij_0_reg_120;
reg   [5:0] k_0_reg_133;
wire   [63:0] zext_ln18_1_fu_189_p1;
wire   [63:0] zext_ln16_1_fu_215_p1;
wire   [63:0] zext_ln16_3_fu_237_p1;
wire   [10:0] tmp_2_fu_156_p3;
wire   [11:0] add_ln18_fu_184_p2;
wire   [11:0] zext_ln16_fu_206_p1;
wire   [11:0] add_ln16_fu_210_p2;
wire   [10:0] tmp_3_fu_220_p3;
wire   [11:0] zext_ln16_2_fu_228_p1;
wire   [11:0] add_ln16_1_fu_232_p2;
wire    ap_CS_fsm_state6;
reg   [10:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
end

matrixmul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixmul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .A_address0(A_address0),
    .A_ce0(A_ce0),
    .A_q0(A_q0),
    .B_address0(B_address0),
    .B_ce0(B_ce0),
    .B_q0(B_q0),
    .AB_address0(AB_addr_reg_278),
    .AB_ce0(AB_ce0),
    .AB_we0(AB_we0),
    .AB_d0(ABij_0_reg_120)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(A_load_reg_301),
    .din1(B_load_reg_306),
    .ce(1'b1),
    .dout(grp_fu_242_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ABij_0_reg_120 <= ABij_fu_246_p2;
    end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        ABij_0_reg_120 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_168_p2 == 1'd1))) begin
        i_0_reg_98 <= i_reg_254;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_98 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_194_p2 == 1'd1))) begin
        j_0_reg_109 <= j_reg_268;
    end else if (((icmp_ln10_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_109 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        k_0_reg_133 <= k_reg_286;
    end else if (((icmp_ln11_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        k_0_reg_133 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_168_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        AB_addr_reg_278 <= zext_ln18_1_fu_189_p1;
        zext_ln18_reg_273[5 : 0] <= zext_ln18_fu_180_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        A_load_reg_301 <= A_q0;
        B_load_reg_306 <= B_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_254 <= i_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_268 <= j_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_286 <= k_fu_200_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln16_reg_311 <= grp_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_144_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln11_reg_259[10 : 5] <= zext_ln11_fu_164_p1[10 : 5];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_194_p2 == 1'd1))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_144_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_168_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_194_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ABij_fu_246_p2 = (mul_ln16_reg_311 + ABij_0_reg_120);

assign A_address0 = zext_ln16_1_fu_215_p1;

assign B_address0 = zext_ln16_3_fu_237_p1;

assign add_ln16_1_fu_232_p2 = (zext_ln18_reg_273 + zext_ln16_2_fu_228_p1);

assign add_ln16_fu_210_p2 = (zext_ln16_fu_206_p1 + zext_ln11_reg_259);

assign add_ln18_fu_184_p2 = (zext_ln11_reg_259 + zext_ln18_fu_180_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_150_p2 = (i_0_reg_98 + 6'd1);

assign icmp_ln10_fu_144_p2 = ((i_0_reg_98 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_168_p2 = ((j_0_reg_109 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_194_p2 = ((k_0_reg_133 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_174_p2 = (j_0_reg_109 + 6'd1);

assign k_fu_200_p2 = (k_0_reg_133 + 6'd1);

assign tmp_2_fu_156_p3 = {{i_0_reg_98}, {5'd0}};

assign tmp_3_fu_220_p3 = {{k_0_reg_133}, {5'd0}};

assign zext_ln11_fu_164_p1 = tmp_2_fu_156_p3;

assign zext_ln16_1_fu_215_p1 = add_ln16_fu_210_p2;

assign zext_ln16_2_fu_228_p1 = tmp_3_fu_220_p3;

assign zext_ln16_3_fu_237_p1 = add_ln16_1_fu_232_p2;

assign zext_ln16_fu_206_p1 = k_0_reg_133;

assign zext_ln18_1_fu_189_p1 = add_ln18_fu_184_p2;

assign zext_ln18_fu_180_p1 = j_0_reg_109;

always @ (posedge ap_clk) begin
    zext_ln11_reg_259[4:0] <= 5'b00000;
    zext_ln11_reg_259[11] <= 1'b0;
    zext_ln18_reg_273[11:6] <= 6'b000000;
end

endmodule //matrixmul
