// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrixmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.439500,HLS_SYN_LAT=1038,HLS_SYN_TPT=none,HLS_SYN_MEM=116,HLS_SYN_DSP=96,HLS_SYN_FF=11785,HLS_SYN_LUT=1617,HLS_VERSION=2019_2}" *)

module matrixmul (
        ap_clk,
        ap_rst_n,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state16 = 3'd4;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 14;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [4:0] A_address0;
reg    A_ce0;
wire   [1023:0] A_q0;
wire   [4:0] B_address0;
reg    B_ce0;
wire   [1023:0] B_q0;
wire   [9:0] AB_address0;
reg    AB_ce0;
reg    AB_we0;
reg   [10:0] indvar_flatten_reg_233;
reg   [5:0] i_0_reg_244;
reg   [5:0] j_0_reg_255;
wire   [0:0] icmp_ln10_fu_266_p2;
reg   [0:0] icmp_ln10_reg_1235;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter5_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter6_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter7_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter8_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter9_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter10_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter11_reg;
reg   [0:0] icmp_ln10_reg_1235_pp0_iter12_reg;
wire   [10:0] add_ln10_fu_272_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln16_fu_290_p3;
reg   [5:0] select_ln16_reg_1244;
reg   [5:0] select_ln16_reg_1244_pp0_iter1_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter2_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter3_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter4_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter5_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter6_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter7_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter8_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter9_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter10_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter11_reg;
reg   [5:0] select_ln16_reg_1244_pp0_iter12_reg;
wire   [5:0] select_ln16_1_fu_298_p3;
reg   [5:0] select_ln16_1_reg_1250;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter1_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter2_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter3_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter4_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter5_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter6_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter7_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter8_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter9_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter10_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter11_reg;
reg   [5:0] select_ln16_1_reg_1250_pp0_iter12_reg;
wire   [5:0] j_fu_306_p2;
wire  signed [31:0] trunc_ln16_fu_320_p1;
reg  signed [31:0] trunc_ln16_reg_1272;
wire  signed [31:0] trunc_ln16_1_fu_324_p1;
reg  signed [31:0] trunc_ln16_1_reg_1277;
reg  signed [31:0] tmp_4_reg_1282;
reg  signed [31:0] tmp_5_reg_1287;
reg  signed [31:0] tmp_6_reg_1292;
reg  signed [31:0] tmp_7_reg_1297;
reg  signed [31:0] tmp_8_reg_1302;
reg  signed [31:0] tmp_9_reg_1307;
reg  signed [31:0] tmp_s_reg_1312;
reg  signed [31:0] tmp_2_reg_1317;
reg  signed [31:0] tmp_3_reg_1322;
reg  signed [31:0] tmp_10_reg_1327;
reg  signed [31:0] tmp_11_reg_1332;
reg  signed [31:0] tmp_12_reg_1337;
reg  signed [31:0] tmp_13_reg_1342;
reg  signed [31:0] tmp_14_reg_1347;
reg  signed [31:0] tmp_15_reg_1352;
reg  signed [31:0] tmp_16_reg_1357;
reg  signed [31:0] tmp_17_reg_1362;
reg  signed [31:0] tmp_18_reg_1367;
reg  signed [31:0] tmp_19_reg_1372;
reg  signed [31:0] tmp_20_reg_1377;
reg  signed [31:0] tmp_21_reg_1382;
reg  signed [31:0] tmp_22_reg_1387;
reg  signed [31:0] tmp_23_reg_1392;
reg  signed [31:0] tmp_24_reg_1397;
reg  signed [31:0] tmp_25_reg_1402;
reg  signed [31:0] tmp_26_reg_1407;
reg  signed [31:0] tmp_27_reg_1412;
reg  signed [31:0] tmp_28_reg_1417;
reg  signed [31:0] tmp_29_reg_1422;
reg  signed [31:0] tmp_30_reg_1427;
reg  signed [31:0] tmp_31_reg_1432;
reg  signed [31:0] tmp_32_reg_1437;
reg  signed [31:0] tmp_33_reg_1442;
reg  signed [31:0] tmp_34_reg_1447;
reg  signed [31:0] tmp_35_reg_1452;
reg  signed [31:0] tmp_36_reg_1457;
reg  signed [31:0] tmp_37_reg_1462;
reg  signed [31:0] tmp_38_reg_1467;
reg  signed [31:0] tmp_39_reg_1472;
reg  signed [31:0] tmp_40_reg_1477;
reg  signed [31:0] tmp_41_reg_1482;
reg  signed [31:0] tmp_42_reg_1487;
reg  signed [31:0] tmp_43_reg_1492;
reg  signed [31:0] tmp_44_reg_1497;
reg  signed [31:0] tmp_45_reg_1502;
reg  signed [31:0] tmp_46_reg_1507;
reg  signed [31:0] tmp_47_reg_1512;
reg  signed [31:0] tmp_48_reg_1517;
reg  signed [31:0] tmp_49_reg_1522;
reg  signed [31:0] tmp_50_reg_1527;
reg  signed [31:0] tmp_51_reg_1532;
reg  signed [31:0] tmp_52_reg_1537;
reg  signed [31:0] tmp_53_reg_1542;
reg  signed [31:0] tmp_54_reg_1547;
reg  signed [31:0] tmp_55_reg_1552;
reg  signed [31:0] tmp_56_reg_1557;
reg  signed [31:0] tmp_57_reg_1562;
reg  signed [31:0] tmp_58_reg_1567;
reg  signed [31:0] tmp_59_reg_1572;
reg  signed [31:0] tmp_60_reg_1577;
reg  signed [31:0] tmp_61_reg_1582;
reg  signed [31:0] tmp_62_reg_1587;
wire   [31:0] grp_fu_948_p2;
reg   [31:0] mul_ln16_reg_1592;
wire   [31:0] grp_fu_952_p2;
reg   [31:0] mul_ln16_1_reg_1597;
wire   [31:0] grp_fu_956_p2;
reg   [31:0] mul_ln16_2_reg_1602;
reg   [31:0] mul_ln16_2_reg_1602_pp0_iter8_reg;
wire   [31:0] grp_fu_960_p2;
reg   [31:0] mul_ln16_3_reg_1607;
reg   [31:0] mul_ln16_3_reg_1607_pp0_iter8_reg;
wire   [31:0] grp_fu_964_p2;
reg   [31:0] mul_ln16_4_reg_1612;
wire   [31:0] grp_fu_968_p2;
reg   [31:0] mul_ln16_5_reg_1617;
wire   [31:0] grp_fu_972_p2;
reg   [31:0] mul_ln16_6_reg_1622;
wire   [31:0] grp_fu_976_p2;
reg   [31:0] mul_ln16_7_reg_1627;
wire   [31:0] grp_fu_980_p2;
reg   [31:0] mul_ln16_8_reg_1632;
wire   [31:0] grp_fu_984_p2;
reg   [31:0] mul_ln16_9_reg_1637;
wire   [31:0] grp_fu_988_p2;
reg   [31:0] mul_ln16_10_reg_1642;
reg   [31:0] mul_ln16_10_reg_1642_pp0_iter8_reg;
wire   [31:0] grp_fu_992_p2;
reg   [31:0] mul_ln16_11_reg_1647;
reg   [31:0] mul_ln16_11_reg_1647_pp0_iter8_reg;
wire   [31:0] grp_fu_996_p2;
reg   [31:0] mul_ln16_12_reg_1652;
wire   [31:0] grp_fu_1000_p2;
reg   [31:0] mul_ln16_13_reg_1657;
wire   [31:0] grp_fu_1004_p2;
reg   [31:0] mul_ln16_14_reg_1662;
reg   [31:0] mul_ln16_14_reg_1662_pp0_iter8_reg;
wire   [31:0] grp_fu_1008_p2;
reg   [31:0] mul_ln16_15_reg_1667;
reg   [31:0] mul_ln16_15_reg_1667_pp0_iter8_reg;
wire   [31:0] grp_fu_1012_p2;
reg   [31:0] mul_ln16_16_reg_1672;
wire   [31:0] grp_fu_1016_p2;
reg   [31:0] mul_ln16_17_reg_1677;
wire   [31:0] grp_fu_1020_p2;
reg   [31:0] mul_ln16_18_reg_1682;
reg   [31:0] mul_ln16_18_reg_1682_pp0_iter8_reg;
wire   [31:0] grp_fu_1024_p2;
reg   [31:0] mul_ln16_19_reg_1687;
reg   [31:0] mul_ln16_19_reg_1687_pp0_iter8_reg;
wire   [31:0] grp_fu_1028_p2;
reg   [31:0] mul_ln16_20_reg_1692;
wire   [31:0] grp_fu_1032_p2;
reg   [31:0] mul_ln16_21_reg_1697;
wire   [31:0] grp_fu_1036_p2;
reg   [31:0] mul_ln16_22_reg_1702;
wire   [31:0] grp_fu_1040_p2;
reg   [31:0] mul_ln16_23_reg_1707;
wire   [31:0] grp_fu_1044_p2;
reg   [31:0] mul_ln16_24_reg_1712;
wire   [31:0] grp_fu_1048_p2;
reg   [31:0] mul_ln16_25_reg_1717;
wire   [31:0] grp_fu_1052_p2;
reg   [31:0] mul_ln16_26_reg_1722;
reg   [31:0] mul_ln16_26_reg_1722_pp0_iter8_reg;
wire   [31:0] grp_fu_1056_p2;
reg   [31:0] mul_ln16_27_reg_1727;
reg   [31:0] mul_ln16_27_reg_1727_pp0_iter8_reg;
wire   [31:0] grp_fu_1060_p2;
reg   [31:0] mul_ln16_28_reg_1732;
wire   [31:0] grp_fu_1064_p2;
reg   [31:0] mul_ln16_29_reg_1737;
wire   [31:0] grp_fu_1068_p2;
reg   [31:0] mul_ln16_30_reg_1742;
wire   [31:0] grp_fu_1072_p2;
reg   [31:0] mul_ln16_31_reg_1747;
wire   [31:0] add_ln16_fu_1076_p2;
reg   [31:0] add_ln16_reg_1752;
wire   [31:0] add_ln16_3_fu_1080_p2;
reg   [31:0] add_ln16_3_reg_1757;
reg   [31:0] add_ln16_3_reg_1757_pp0_iter9_reg;
wire   [31:0] add_ln16_4_fu_1084_p2;
reg   [31:0] add_ln16_4_reg_1762;
reg   [31:0] add_ln16_4_reg_1762_pp0_iter9_reg;
wire   [31:0] add_ln16_7_fu_1088_p2;
reg   [31:0] add_ln16_7_reg_1767;
wire   [31:0] add_ln16_10_fu_1092_p2;
reg   [31:0] add_ln16_10_reg_1772;
wire   [31:0] add_ln16_15_fu_1096_p2;
reg   [31:0] add_ln16_15_reg_1777;
wire   [31:0] add_ln16_18_fu_1100_p2;
reg   [31:0] add_ln16_18_reg_1782;
reg   [31:0] add_ln16_18_reg_1782_pp0_iter9_reg;
wire   [31:0] add_ln16_19_fu_1104_p2;
reg   [31:0] add_ln16_19_reg_1787;
reg   [31:0] add_ln16_19_reg_1787_pp0_iter9_reg;
wire   [31:0] add_ln16_22_fu_1108_p2;
reg   [31:0] add_ln16_22_reg_1792;
wire   [31:0] add_ln16_25_fu_1112_p2;
reg   [31:0] add_ln16_25_reg_1797;
reg   [31:0] add_ln16_25_reg_1797_pp0_iter9_reg;
wire   [31:0] add_ln16_26_fu_1116_p2;
reg   [31:0] add_ln16_26_reg_1802;
reg   [31:0] add_ln16_26_reg_1802_pp0_iter9_reg;
wire   [31:0] add_ln16_2_fu_1124_p2;
reg   [31:0] add_ln16_2_reg_1807;
wire   [31:0] add_ln16_9_fu_1133_p2;
reg   [31:0] add_ln16_9_reg_1812;
reg   [31:0] add_ln16_9_reg_1812_pp0_iter10_reg;
wire   [31:0] add_ln16_12_fu_1142_p2;
reg   [31:0] add_ln16_12_reg_1817;
reg   [31:0] add_ln16_12_reg_1817_pp0_iter10_reg;
wire   [31:0] add_ln16_17_fu_1151_p2;
reg   [31:0] add_ln16_17_reg_1822;
wire   [31:0] add_ln16_24_fu_1160_p2;
reg   [31:0] add_ln16_24_reg_1827;
wire   [31:0] add_ln16_6_fu_1169_p2;
reg   [31:0] add_ln16_6_reg_1832;
wire   [31:0] add_ln16_21_fu_1178_p2;
reg   [31:0] add_ln16_21_reg_1837;
reg   [31:0] add_ln16_21_reg_1837_pp0_iter11_reg;
wire   [31:0] add_ln16_28_fu_1187_p2;
reg   [31:0] add_ln16_28_reg_1842;
reg   [31:0] add_ln16_28_reg_1842_pp0_iter11_reg;
wire   [31:0] add_ln16_14_fu_1196_p2;
reg   [31:0] add_ln16_14_reg_1847;
wire   [31:0] add_ln16_30_fu_1205_p2;
reg   [31:0] add_ln16_30_reg_1852;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg   [5:0] ap_phi_mux_i_0_phi_fu_248_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln16_fu_312_p1;
wire   [63:0] zext_ln16_1_fu_316_p1;
wire   [63:0] zext_ln18_1_fu_1230_p1;
wire   [0:0] icmp_ln11_fu_284_p2;
wire   [5:0] i_fu_278_p2;
wire   [31:0] add_ln16_1_fu_1120_p2;
wire   [31:0] add_ln16_8_fu_1129_p2;
wire   [31:0] add_ln16_11_fu_1138_p2;
wire   [31:0] add_ln16_16_fu_1147_p2;
wire   [31:0] add_ln16_23_fu_1156_p2;
wire   [31:0] add_ln16_5_fu_1165_p2;
wire   [31:0] add_ln16_20_fu_1174_p2;
wire   [31:0] add_ln16_27_fu_1183_p2;
wire   [31:0] add_ln16_13_fu_1192_p2;
wire   [31:0] add_ln16_29_fu_1201_p2;
wire   [10:0] tmp_fu_1210_p3;
wire   [11:0] zext_ln11_fu_1217_p1;
wire   [11:0] zext_ln18_fu_1221_p1;
wire   [11:0] add_ln18_fu_1224_p2;
wire    ap_CS_fsm_state16;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

matrixmul_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
matrixmul_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .A_address0(A_address0),
    .A_ce0(A_ce0),
    .A_q0(A_q0),
    .B_address0(B_address0),
    .B_ce0(B_ce0),
    .B_q0(B_q0),
    .AB_address0(AB_address0),
    .AB_ce0(AB_ce0),
    .AB_we0(AB_we0),
    .AB_d0(add_ln16_30_reg_1852)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(trunc_ln16_1_reg_1277),
    .din1(trunc_ln16_reg_1272),
    .ce(1'b1),
    .dout(grp_fu_948_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_5_reg_1287),
    .din1(tmp_4_reg_1282),
    .ce(1'b1),
    .dout(grp_fu_952_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_7_reg_1297),
    .din1(tmp_6_reg_1292),
    .ce(1'b1),
    .dout(grp_fu_956_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_9_reg_1307),
    .din1(tmp_8_reg_1302),
    .ce(1'b1),
    .dout(grp_fu_960_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_2_reg_1317),
    .din1(tmp_s_reg_1312),
    .ce(1'b1),
    .dout(grp_fu_964_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_10_reg_1327),
    .din1(tmp_3_reg_1322),
    .ce(1'b1),
    .dout(grp_fu_968_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_12_reg_1337),
    .din1(tmp_11_reg_1332),
    .ce(1'b1),
    .dout(grp_fu_972_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_14_reg_1347),
    .din1(tmp_13_reg_1342),
    .ce(1'b1),
    .dout(grp_fu_976_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_16_reg_1357),
    .din1(tmp_15_reg_1352),
    .ce(1'b1),
    .dout(grp_fu_980_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_18_reg_1367),
    .din1(tmp_17_reg_1362),
    .ce(1'b1),
    .dout(grp_fu_984_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_20_reg_1377),
    .din1(tmp_19_reg_1372),
    .ce(1'b1),
    .dout(grp_fu_988_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_22_reg_1387),
    .din1(tmp_21_reg_1382),
    .ce(1'b1),
    .dout(grp_fu_992_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_24_reg_1397),
    .din1(tmp_23_reg_1392),
    .ce(1'b1),
    .dout(grp_fu_996_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_26_reg_1407),
    .din1(tmp_25_reg_1402),
    .ce(1'b1),
    .dout(grp_fu_1000_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_28_reg_1417),
    .din1(tmp_27_reg_1412),
    .ce(1'b1),
    .dout(grp_fu_1004_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_30_reg_1427),
    .din1(tmp_29_reg_1422),
    .ce(1'b1),
    .dout(grp_fu_1008_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_32_reg_1437),
    .din1(tmp_31_reg_1432),
    .ce(1'b1),
    .dout(grp_fu_1012_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_34_reg_1447),
    .din1(tmp_33_reg_1442),
    .ce(1'b1),
    .dout(grp_fu_1016_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_36_reg_1457),
    .din1(tmp_35_reg_1452),
    .ce(1'b1),
    .dout(grp_fu_1020_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_38_reg_1467),
    .din1(tmp_37_reg_1462),
    .ce(1'b1),
    .dout(grp_fu_1024_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_40_reg_1477),
    .din1(tmp_39_reg_1472),
    .ce(1'b1),
    .dout(grp_fu_1028_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U22(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_42_reg_1487),
    .din1(tmp_41_reg_1482),
    .ce(1'b1),
    .dout(grp_fu_1032_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U23(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_44_reg_1497),
    .din1(tmp_43_reg_1492),
    .ce(1'b1),
    .dout(grp_fu_1036_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U24(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_46_reg_1507),
    .din1(tmp_45_reg_1502),
    .ce(1'b1),
    .dout(grp_fu_1040_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U25(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_48_reg_1517),
    .din1(tmp_47_reg_1512),
    .ce(1'b1),
    .dout(grp_fu_1044_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U26(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_50_reg_1527),
    .din1(tmp_49_reg_1522),
    .ce(1'b1),
    .dout(grp_fu_1048_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U27(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_52_reg_1537),
    .din1(tmp_51_reg_1532),
    .ce(1'b1),
    .dout(grp_fu_1052_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U28(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_54_reg_1547),
    .din1(tmp_53_reg_1542),
    .ce(1'b1),
    .dout(grp_fu_1056_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U29(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_56_reg_1557),
    .din1(tmp_55_reg_1552),
    .ce(1'b1),
    .dout(grp_fu_1060_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U30(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_58_reg_1567),
    .din1(tmp_57_reg_1562),
    .ce(1'b1),
    .dout(grp_fu_1064_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U31(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_60_reg_1577),
    .din1(tmp_59_reg_1572),
    .ce(1'b1),
    .dout(grp_fu_1068_p2)
);

matrixmul_mul_32sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matrixmul_mul_32sbkb_U32(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_62_reg_1587),
    .din1(tmp_61_reg_1582),
    .ce(1'b1),
    .dout(grp_fu_1072_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter13 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_244 <= select_ln16_1_reg_1250;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_244 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_233 <= add_ln10_fu_272_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_233 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_0_reg_255 <= j_fu_306_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_255 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_10_reg_1772 <= add_ln16_10_fu_1092_p2;
        add_ln16_15_reg_1777 <= add_ln16_15_fu_1096_p2;
        add_ln16_18_reg_1782 <= add_ln16_18_fu_1100_p2;
        add_ln16_19_reg_1787 <= add_ln16_19_fu_1104_p2;
        add_ln16_22_reg_1792 <= add_ln16_22_fu_1108_p2;
        add_ln16_25_reg_1797 <= add_ln16_25_fu_1112_p2;
        add_ln16_26_reg_1802 <= add_ln16_26_fu_1116_p2;
        add_ln16_3_reg_1757 <= add_ln16_3_fu_1080_p2;
        add_ln16_4_reg_1762 <= add_ln16_4_fu_1084_p2;
        add_ln16_7_reg_1767 <= add_ln16_7_fu_1088_p2;
        add_ln16_reg_1752 <= add_ln16_fu_1076_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_12_reg_1817 <= add_ln16_12_fu_1142_p2;
        add_ln16_17_reg_1822 <= add_ln16_17_fu_1151_p2;
        add_ln16_24_reg_1827 <= add_ln16_24_fu_1160_p2;
        add_ln16_2_reg_1807 <= add_ln16_2_fu_1124_p2;
        add_ln16_9_reg_1812 <= add_ln16_9_fu_1133_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln16_12_reg_1817_pp0_iter10_reg <= add_ln16_12_reg_1817;
        add_ln16_18_reg_1782_pp0_iter9_reg <= add_ln16_18_reg_1782;
        add_ln16_19_reg_1787_pp0_iter9_reg <= add_ln16_19_reg_1787;
        add_ln16_21_reg_1837_pp0_iter11_reg <= add_ln16_21_reg_1837;
        add_ln16_25_reg_1797_pp0_iter9_reg <= add_ln16_25_reg_1797;
        add_ln16_26_reg_1802_pp0_iter9_reg <= add_ln16_26_reg_1802;
        add_ln16_28_reg_1842_pp0_iter11_reg <= add_ln16_28_reg_1842;
        add_ln16_3_reg_1757_pp0_iter9_reg <= add_ln16_3_reg_1757;
        add_ln16_4_reg_1762_pp0_iter9_reg <= add_ln16_4_reg_1762;
        add_ln16_9_reg_1812_pp0_iter10_reg <= add_ln16_9_reg_1812;
        icmp_ln10_reg_1235_pp0_iter10_reg <= icmp_ln10_reg_1235_pp0_iter9_reg;
        icmp_ln10_reg_1235_pp0_iter11_reg <= icmp_ln10_reg_1235_pp0_iter10_reg;
        icmp_ln10_reg_1235_pp0_iter12_reg <= icmp_ln10_reg_1235_pp0_iter11_reg;
        icmp_ln10_reg_1235_pp0_iter2_reg <= icmp_ln10_reg_1235_pp0_iter1_reg;
        icmp_ln10_reg_1235_pp0_iter3_reg <= icmp_ln10_reg_1235_pp0_iter2_reg;
        icmp_ln10_reg_1235_pp0_iter4_reg <= icmp_ln10_reg_1235_pp0_iter3_reg;
        icmp_ln10_reg_1235_pp0_iter5_reg <= icmp_ln10_reg_1235_pp0_iter4_reg;
        icmp_ln10_reg_1235_pp0_iter6_reg <= icmp_ln10_reg_1235_pp0_iter5_reg;
        icmp_ln10_reg_1235_pp0_iter7_reg <= icmp_ln10_reg_1235_pp0_iter6_reg;
        icmp_ln10_reg_1235_pp0_iter8_reg <= icmp_ln10_reg_1235_pp0_iter7_reg;
        icmp_ln10_reg_1235_pp0_iter9_reg <= icmp_ln10_reg_1235_pp0_iter8_reg;
        mul_ln16_10_reg_1642_pp0_iter8_reg <= mul_ln16_10_reg_1642;
        mul_ln16_11_reg_1647_pp0_iter8_reg <= mul_ln16_11_reg_1647;
        mul_ln16_14_reg_1662_pp0_iter8_reg <= mul_ln16_14_reg_1662;
        mul_ln16_15_reg_1667_pp0_iter8_reg <= mul_ln16_15_reg_1667;
        mul_ln16_18_reg_1682_pp0_iter8_reg <= mul_ln16_18_reg_1682;
        mul_ln16_19_reg_1687_pp0_iter8_reg <= mul_ln16_19_reg_1687;
        mul_ln16_26_reg_1722_pp0_iter8_reg <= mul_ln16_26_reg_1722;
        mul_ln16_27_reg_1727_pp0_iter8_reg <= mul_ln16_27_reg_1727;
        mul_ln16_2_reg_1602_pp0_iter8_reg <= mul_ln16_2_reg_1602;
        mul_ln16_3_reg_1607_pp0_iter8_reg <= mul_ln16_3_reg_1607;
        select_ln16_1_reg_1250_pp0_iter10_reg <= select_ln16_1_reg_1250_pp0_iter9_reg;
        select_ln16_1_reg_1250_pp0_iter11_reg <= select_ln16_1_reg_1250_pp0_iter10_reg;
        select_ln16_1_reg_1250_pp0_iter12_reg <= select_ln16_1_reg_1250_pp0_iter11_reg;
        select_ln16_1_reg_1250_pp0_iter2_reg <= select_ln16_1_reg_1250_pp0_iter1_reg;
        select_ln16_1_reg_1250_pp0_iter3_reg <= select_ln16_1_reg_1250_pp0_iter2_reg;
        select_ln16_1_reg_1250_pp0_iter4_reg <= select_ln16_1_reg_1250_pp0_iter3_reg;
        select_ln16_1_reg_1250_pp0_iter5_reg <= select_ln16_1_reg_1250_pp0_iter4_reg;
        select_ln16_1_reg_1250_pp0_iter6_reg <= select_ln16_1_reg_1250_pp0_iter5_reg;
        select_ln16_1_reg_1250_pp0_iter7_reg <= select_ln16_1_reg_1250_pp0_iter6_reg;
        select_ln16_1_reg_1250_pp0_iter8_reg <= select_ln16_1_reg_1250_pp0_iter7_reg;
        select_ln16_1_reg_1250_pp0_iter9_reg <= select_ln16_1_reg_1250_pp0_iter8_reg;
        select_ln16_reg_1244_pp0_iter10_reg <= select_ln16_reg_1244_pp0_iter9_reg;
        select_ln16_reg_1244_pp0_iter11_reg <= select_ln16_reg_1244_pp0_iter10_reg;
        select_ln16_reg_1244_pp0_iter12_reg <= select_ln16_reg_1244_pp0_iter11_reg;
        select_ln16_reg_1244_pp0_iter2_reg <= select_ln16_reg_1244_pp0_iter1_reg;
        select_ln16_reg_1244_pp0_iter3_reg <= select_ln16_reg_1244_pp0_iter2_reg;
        select_ln16_reg_1244_pp0_iter4_reg <= select_ln16_reg_1244_pp0_iter3_reg;
        select_ln16_reg_1244_pp0_iter5_reg <= select_ln16_reg_1244_pp0_iter4_reg;
        select_ln16_reg_1244_pp0_iter6_reg <= select_ln16_reg_1244_pp0_iter5_reg;
        select_ln16_reg_1244_pp0_iter7_reg <= select_ln16_reg_1244_pp0_iter6_reg;
        select_ln16_reg_1244_pp0_iter8_reg <= select_ln16_reg_1244_pp0_iter7_reg;
        select_ln16_reg_1244_pp0_iter9_reg <= select_ln16_reg_1244_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter10_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_14_reg_1847 <= add_ln16_14_fu_1196_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter9_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_21_reg_1837 <= add_ln16_21_fu_1178_p2;
        add_ln16_28_reg_1842 <= add_ln16_28_fu_1187_p2;
        add_ln16_6_reg_1832 <= add_ln16_6_fu_1169_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter11_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln16_30_reg_1852 <= add_ln16_30_fu_1205_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_1235 <= icmp_ln10_fu_266_p2;
        icmp_ln10_reg_1235_pp0_iter1_reg <= icmp_ln10_reg_1235;
        select_ln16_1_reg_1250_pp0_iter1_reg <= select_ln16_1_reg_1250;
        select_ln16_reg_1244_pp0_iter1_reg <= select_ln16_reg_1244;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_ln16_10_reg_1642 <= grp_fu_988_p2;
        mul_ln16_11_reg_1647 <= grp_fu_992_p2;
        mul_ln16_12_reg_1652 <= grp_fu_996_p2;
        mul_ln16_13_reg_1657 <= grp_fu_1000_p2;
        mul_ln16_14_reg_1662 <= grp_fu_1004_p2;
        mul_ln16_15_reg_1667 <= grp_fu_1008_p2;
        mul_ln16_16_reg_1672 <= grp_fu_1012_p2;
        mul_ln16_17_reg_1677 <= grp_fu_1016_p2;
        mul_ln16_18_reg_1682 <= grp_fu_1020_p2;
        mul_ln16_19_reg_1687 <= grp_fu_1024_p2;
        mul_ln16_1_reg_1597 <= grp_fu_952_p2;
        mul_ln16_20_reg_1692 <= grp_fu_1028_p2;
        mul_ln16_21_reg_1697 <= grp_fu_1032_p2;
        mul_ln16_22_reg_1702 <= grp_fu_1036_p2;
        mul_ln16_23_reg_1707 <= grp_fu_1040_p2;
        mul_ln16_24_reg_1712 <= grp_fu_1044_p2;
        mul_ln16_25_reg_1717 <= grp_fu_1048_p2;
        mul_ln16_26_reg_1722 <= grp_fu_1052_p2;
        mul_ln16_27_reg_1727 <= grp_fu_1056_p2;
        mul_ln16_28_reg_1732 <= grp_fu_1060_p2;
        mul_ln16_29_reg_1737 <= grp_fu_1064_p2;
        mul_ln16_2_reg_1602 <= grp_fu_956_p2;
        mul_ln16_30_reg_1742 <= grp_fu_1068_p2;
        mul_ln16_31_reg_1747 <= grp_fu_1072_p2;
        mul_ln16_3_reg_1607 <= grp_fu_960_p2;
        mul_ln16_4_reg_1612 <= grp_fu_964_p2;
        mul_ln16_5_reg_1617 <= grp_fu_968_p2;
        mul_ln16_6_reg_1622 <= grp_fu_972_p2;
        mul_ln16_7_reg_1627 <= grp_fu_976_p2;
        mul_ln16_8_reg_1632 <= grp_fu_980_p2;
        mul_ln16_9_reg_1637 <= grp_fu_984_p2;
        mul_ln16_reg_1592 <= grp_fu_948_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln16_1_reg_1250 <= select_ln16_1_fu_298_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_266_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln16_reg_1244 <= select_ln16_fu_290_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_1235_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_1327 <= {{B_q0[191:160]}};
        tmp_11_reg_1332 <= {{A_q0[223:192]}};
        tmp_12_reg_1337 <= {{B_q0[223:192]}};
        tmp_13_reg_1342 <= {{A_q0[255:224]}};
        tmp_14_reg_1347 <= {{B_q0[255:224]}};
        tmp_15_reg_1352 <= {{A_q0[287:256]}};
        tmp_16_reg_1357 <= {{B_q0[287:256]}};
        tmp_17_reg_1362 <= {{A_q0[319:288]}};
        tmp_18_reg_1367 <= {{B_q0[319:288]}};
        tmp_19_reg_1372 <= {{A_q0[351:320]}};
        tmp_20_reg_1377 <= {{B_q0[351:320]}};
        tmp_21_reg_1382 <= {{A_q0[383:352]}};
        tmp_22_reg_1387 <= {{B_q0[383:352]}};
        tmp_23_reg_1392 <= {{A_q0[415:384]}};
        tmp_24_reg_1397 <= {{B_q0[415:384]}};
        tmp_25_reg_1402 <= {{A_q0[447:416]}};
        tmp_26_reg_1407 <= {{B_q0[447:416]}};
        tmp_27_reg_1412 <= {{A_q0[479:448]}};
        tmp_28_reg_1417 <= {{B_q0[479:448]}};
        tmp_29_reg_1422 <= {{A_q0[511:480]}};
        tmp_2_reg_1317 <= {{B_q0[159:128]}};
        tmp_30_reg_1427 <= {{B_q0[511:480]}};
        tmp_31_reg_1432 <= {{A_q0[543:512]}};
        tmp_32_reg_1437 <= {{B_q0[543:512]}};
        tmp_33_reg_1442 <= {{A_q0[575:544]}};
        tmp_34_reg_1447 <= {{B_q0[575:544]}};
        tmp_35_reg_1452 <= {{A_q0[607:576]}};
        tmp_36_reg_1457 <= {{B_q0[607:576]}};
        tmp_37_reg_1462 <= {{A_q0[639:608]}};
        tmp_38_reg_1467 <= {{B_q0[639:608]}};
        tmp_39_reg_1472 <= {{A_q0[671:640]}};
        tmp_3_reg_1322 <= {{A_q0[191:160]}};
        tmp_40_reg_1477 <= {{B_q0[671:640]}};
        tmp_41_reg_1482 <= {{A_q0[703:672]}};
        tmp_42_reg_1487 <= {{B_q0[703:672]}};
        tmp_43_reg_1492 <= {{A_q0[735:704]}};
        tmp_44_reg_1497 <= {{B_q0[735:704]}};
        tmp_45_reg_1502 <= {{A_q0[767:736]}};
        tmp_46_reg_1507 <= {{B_q0[767:736]}};
        tmp_47_reg_1512 <= {{A_q0[799:768]}};
        tmp_48_reg_1517 <= {{B_q0[799:768]}};
        tmp_49_reg_1522 <= {{A_q0[831:800]}};
        tmp_4_reg_1282 <= {{A_q0[63:32]}};
        tmp_50_reg_1527 <= {{B_q0[831:800]}};
        tmp_51_reg_1532 <= {{A_q0[863:832]}};
        tmp_52_reg_1537 <= {{B_q0[863:832]}};
        tmp_53_reg_1542 <= {{A_q0[895:864]}};
        tmp_54_reg_1547 <= {{B_q0[895:864]}};
        tmp_55_reg_1552 <= {{A_q0[927:896]}};
        tmp_56_reg_1557 <= {{B_q0[927:896]}};
        tmp_57_reg_1562 <= {{A_q0[959:928]}};
        tmp_58_reg_1567 <= {{B_q0[959:928]}};
        tmp_59_reg_1572 <= {{A_q0[991:960]}};
        tmp_5_reg_1287 <= {{B_q0[63:32]}};
        tmp_60_reg_1577 <= {{B_q0[991:960]}};
        tmp_61_reg_1582 <= {{A_q0[1023:992]}};
        tmp_62_reg_1587 <= {{B_q0[1023:992]}};
        tmp_6_reg_1292 <= {{A_q0[95:64]}};
        tmp_7_reg_1297 <= {{B_q0[95:64]}};
        tmp_8_reg_1302 <= {{A_q0[127:96]}};
        tmp_9_reg_1307 <= {{B_q0[127:96]}};
        tmp_s_reg_1312 <= {{A_q0[159:128]}};
        trunc_ln16_1_reg_1277 <= trunc_ln16_1_fu_324_p1;
        trunc_ln16_reg_1272 <= trunc_ln16_fu_320_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_ce0 = 1'b1;
    end else begin
        AB_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (icmp_ln10_reg_1235_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_we0 = 1'b1;
    end else begin
        AB_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_266_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_1235 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_248_p4 = select_ln16_1_reg_1250;
    end else begin
        ap_phi_mux_i_0_phi_fu_248_p4 = i_0_reg_244;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter12 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((icmp_ln10_fu_266_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_address0 = zext_ln18_1_fu_1230_p1;

assign A_address0 = zext_ln16_fu_312_p1;

assign B_address0 = zext_ln16_1_fu_316_p1;

assign add_ln10_fu_272_p2 = (indvar_flatten_reg_233 + 11'd1);

assign add_ln16_10_fu_1092_p2 = (mul_ln16_13_reg_1657 + mul_ln16_12_reg_1652);

assign add_ln16_11_fu_1138_p2 = (mul_ln16_15_reg_1667_pp0_iter8_reg + mul_ln16_14_reg_1662_pp0_iter8_reg);

assign add_ln16_12_fu_1142_p2 = (add_ln16_10_reg_1772 + add_ln16_11_fu_1138_p2);

assign add_ln16_13_fu_1192_p2 = (add_ln16_9_reg_1812_pp0_iter10_reg + add_ln16_12_reg_1817_pp0_iter10_reg);

assign add_ln16_14_fu_1196_p2 = (add_ln16_6_reg_1832 + add_ln16_13_fu_1192_p2);

assign add_ln16_15_fu_1096_p2 = (mul_ln16_17_reg_1677 + mul_ln16_16_reg_1672);

assign add_ln16_16_fu_1147_p2 = (mul_ln16_19_reg_1687_pp0_iter8_reg + mul_ln16_18_reg_1682_pp0_iter8_reg);

assign add_ln16_17_fu_1151_p2 = (add_ln16_15_reg_1777 + add_ln16_16_fu_1147_p2);

assign add_ln16_18_fu_1100_p2 = (mul_ln16_21_reg_1697 + mul_ln16_20_reg_1692);

assign add_ln16_19_fu_1104_p2 = (mul_ln16_23_reg_1707 + mul_ln16_22_reg_1702);

assign add_ln16_1_fu_1120_p2 = (mul_ln16_3_reg_1607_pp0_iter8_reg + mul_ln16_2_reg_1602_pp0_iter8_reg);

assign add_ln16_20_fu_1174_p2 = (add_ln16_18_reg_1782_pp0_iter9_reg + add_ln16_19_reg_1787_pp0_iter9_reg);

assign add_ln16_21_fu_1178_p2 = (add_ln16_17_reg_1822 + add_ln16_20_fu_1174_p2);

assign add_ln16_22_fu_1108_p2 = (mul_ln16_25_reg_1717 + mul_ln16_24_reg_1712);

assign add_ln16_23_fu_1156_p2 = (mul_ln16_27_reg_1727_pp0_iter8_reg + mul_ln16_26_reg_1722_pp0_iter8_reg);

assign add_ln16_24_fu_1160_p2 = (add_ln16_22_reg_1792 + add_ln16_23_fu_1156_p2);

assign add_ln16_25_fu_1112_p2 = (mul_ln16_29_reg_1737 + mul_ln16_28_reg_1732);

assign add_ln16_26_fu_1116_p2 = (mul_ln16_31_reg_1747 + mul_ln16_30_reg_1742);

assign add_ln16_27_fu_1183_p2 = (add_ln16_25_reg_1797_pp0_iter9_reg + add_ln16_26_reg_1802_pp0_iter9_reg);

assign add_ln16_28_fu_1187_p2 = (add_ln16_24_reg_1827 + add_ln16_27_fu_1183_p2);

assign add_ln16_29_fu_1201_p2 = (add_ln16_21_reg_1837_pp0_iter11_reg + add_ln16_28_reg_1842_pp0_iter11_reg);

assign add_ln16_2_fu_1124_p2 = (add_ln16_reg_1752 + add_ln16_1_fu_1120_p2);

assign add_ln16_30_fu_1205_p2 = (add_ln16_14_reg_1847 + add_ln16_29_fu_1201_p2);

assign add_ln16_3_fu_1080_p2 = (mul_ln16_5_reg_1617 + mul_ln16_4_reg_1612);

assign add_ln16_4_fu_1084_p2 = (mul_ln16_7_reg_1627 + mul_ln16_6_reg_1622);

assign add_ln16_5_fu_1165_p2 = (add_ln16_3_reg_1757_pp0_iter9_reg + add_ln16_4_reg_1762_pp0_iter9_reg);

assign add_ln16_6_fu_1169_p2 = (add_ln16_2_reg_1807 + add_ln16_5_fu_1165_p2);

assign add_ln16_7_fu_1088_p2 = (mul_ln16_9_reg_1637 + mul_ln16_8_reg_1632);

assign add_ln16_8_fu_1129_p2 = (mul_ln16_11_reg_1647_pp0_iter8_reg + mul_ln16_10_reg_1642_pp0_iter8_reg);

assign add_ln16_9_fu_1133_p2 = (add_ln16_7_reg_1767 + add_ln16_8_fu_1129_p2);

assign add_ln16_fu_1076_p2 = (mul_ln16_1_reg_1597 + mul_ln16_reg_1592);

assign add_ln18_fu_1224_p2 = (zext_ln11_fu_1217_p1 + zext_ln18_fu_1221_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_fu_278_p2 = (6'd1 + ap_phi_mux_i_0_phi_fu_248_p4);

assign icmp_ln10_fu_266_p2 = ((indvar_flatten_reg_233 == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln11_fu_284_p2 = ((j_0_reg_255 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_306_p2 = (6'd1 + select_ln16_fu_290_p3);

assign select_ln16_1_fu_298_p3 = ((icmp_ln11_fu_284_p2[0:0] === 1'b1) ? i_fu_278_p2 : ap_phi_mux_i_0_phi_fu_248_p4);

assign select_ln16_fu_290_p3 = ((icmp_ln11_fu_284_p2[0:0] === 1'b1) ? 6'd0 : j_0_reg_255);

assign tmp_fu_1210_p3 = {{select_ln16_1_reg_1250_pp0_iter12_reg}, {5'd0}};

assign trunc_ln16_1_fu_324_p1 = B_q0[31:0];

assign trunc_ln16_fu_320_p1 = A_q0[31:0];

assign zext_ln11_fu_1217_p1 = tmp_fu_1210_p3;

assign zext_ln16_1_fu_316_p1 = select_ln16_reg_1244;

assign zext_ln16_fu_312_p1 = select_ln16_1_reg_1250;

assign zext_ln18_1_fu_1230_p1 = add_ln18_fu_1224_p2;

assign zext_ln18_fu_1221_p1 = select_ln16_reg_1244_pp0_iter12_reg;

endmodule //matrixmul
