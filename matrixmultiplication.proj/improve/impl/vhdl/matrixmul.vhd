-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrixmul is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 14;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matrixmul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrixmul,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.439500,HLS_SYN_LAT=1038,HLS_SYN_TPT=none,HLS_SYN_MEM=116,HLS_SYN_DSP=96,HLS_SYN_FF=11785,HLS_SYN_LUT=1617,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_11F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011111";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_13F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100111111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_15F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101011111";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_17F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101111111";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_19F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110011111";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110111111";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111011111";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111111111";
    constant ap_const_lv32_200 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_const_lv32_21F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000011111";
    constant ap_const_lv32_220 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000100000";
    constant ap_const_lv32_23F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000111111";
    constant ap_const_lv32_240 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001000000";
    constant ap_const_lv32_25F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001011111";
    constant ap_const_lv32_260 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001100000";
    constant ap_const_lv32_27F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001001111111";
    constant ap_const_lv32_280 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010000000";
    constant ap_const_lv32_29F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010011111";
    constant ap_const_lv32_2A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010100000";
    constant ap_const_lv32_2BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010111111";
    constant ap_const_lv32_2C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011000000";
    constant ap_const_lv32_2DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011011111";
    constant ap_const_lv32_2E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011100000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv32_31F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100011111";
    constant ap_const_lv32_320 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100100000";
    constant ap_const_lv32_33F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100111111";
    constant ap_const_lv32_340 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101000000";
    constant ap_const_lv32_35F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101011111";
    constant ap_const_lv32_360 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101100000";
    constant ap_const_lv32_37F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001101111111";
    constant ap_const_lv32_380 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110000000";
    constant ap_const_lv32_39F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110011111";
    constant ap_const_lv32_3A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110100000";
    constant ap_const_lv32_3BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001110111111";
    constant ap_const_lv32_3C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111000000";
    constant ap_const_lv32_3DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111011111";
    constant ap_const_lv32_3E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111100000";
    constant ap_const_lv32_3FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111111111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal A_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_ce0 : STD_LOGIC;
    signal A_q0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal B_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_q0 : STD_LOGIC_VECTOR (1023 downto 0);
    signal AB_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal AB_ce0 : STD_LOGIC;
    signal AB_we0 : STD_LOGIC;
    signal indvar_flatten_reg_233 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_0_reg_244 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_0_reg_255 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln10_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_1235_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_1235_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_272_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln16_fu_290_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_reg_1244_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_fu_298_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_1_reg_1250_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_306_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln16_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_reg_1272 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_1_fu_324_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_1_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1287 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1292 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1297 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1307 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1317 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1322 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_1327 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_1337 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1342 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1347 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1357 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_1367 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1372 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1377 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1382 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1387 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1392 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1397 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1402 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_reg_1412 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_reg_1417 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1422 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_1427 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_1432 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1437 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_reg_1442 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1447 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_1452 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_reg_1457 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_37_reg_1462 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_1467 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_39_reg_1472 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_reg_1477 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_41_reg_1482 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_1487 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_1492 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_1497 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1502 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_1507 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_1512 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_reg_1517 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_reg_1522 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_reg_1527 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_reg_1532 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_reg_1537 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_reg_1542 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_reg_1547 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_reg_1552 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_reg_1557 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_reg_1562 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_1567 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_1572 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_1582 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_1587 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_948_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_952_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_1_reg_1597 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_2_reg_1602 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_2_reg_1602_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_3_reg_1607 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_3_reg_1607_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_964_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_4_reg_1612 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_968_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_5_reg_1617 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_972_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_6_reg_1622 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_7_reg_1627 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_980_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_8_reg_1632 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_984_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_9_reg_1637 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_988_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_10_reg_1642 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_10_reg_1642_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_11_reg_1647 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_11_reg_1647_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_996_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_12_reg_1652 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1000_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_13_reg_1657 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1004_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_14_reg_1662 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_14_reg_1662_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1008_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_15_reg_1667 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_15_reg_1667_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_16_reg_1672 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1016_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_17_reg_1677 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1020_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_18_reg_1682 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_18_reg_1682_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1024_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_19_reg_1687 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_19_reg_1687_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1028_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_20_reg_1692 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1032_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_21_reg_1697 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_22_reg_1702 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1040_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_23_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1044_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_24_reg_1712 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1048_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_25_reg_1717 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1052_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_26_reg_1722 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_26_reg_1722_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_27_reg_1727 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_27_reg_1727_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1060_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_28_reg_1732 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_29_reg_1737 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1068_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_30_reg_1742 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1072_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln16_31_reg_1747 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_1076_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_reg_1752 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_fu_1080_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_reg_1757 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_reg_1757_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_fu_1084_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_reg_1762 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_reg_1762_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_7_fu_1088_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_7_reg_1767 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_10_fu_1092_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_10_reg_1772 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_15_fu_1096_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_15_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_18_fu_1100_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_18_reg_1782 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_18_reg_1782_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_19_fu_1104_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_19_reg_1787 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_19_reg_1787_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_22_fu_1108_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_22_reg_1792 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_25_fu_1112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_25_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_25_reg_1797_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_26_fu_1116_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_26_reg_1802 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_26_reg_1802_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_2_fu_1124_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_2_reg_1807 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_9_fu_1133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_9_reg_1812 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_9_reg_1812_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_12_fu_1142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_12_reg_1817 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_12_reg_1817_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_17_fu_1151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_17_reg_1822 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_24_fu_1160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_24_reg_1827 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_6_fu_1169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_6_reg_1832 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_21_fu_1178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_21_reg_1837 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_21_reg_1837_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_28_fu_1187_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_28_reg_1842 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_28_reg_1842_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_14_fu_1196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_14_reg_1847 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_30_fu_1205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_30_reg_1852 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_248_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln16_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln16_1_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_1_fu_1230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln11_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_278_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln16_1_fu_1120_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_8_fu_1129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_11_fu_1138_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_16_fu_1147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_23_fu_1156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_5_fu_1165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_20_fu_1174_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_27_fu_1183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_13_fu_1192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_29_fu_1201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1210_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln11_fu_1217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln18_fu_1221_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln18_fu_1224_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrixmul_mul_32sbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrixmul_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        A_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        A_ce0 : IN STD_LOGIC;
        A_q0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        B_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        B_ce0 : IN STD_LOGIC;
        B_q0 : OUT STD_LOGIC_VECTOR (1023 downto 0);
        AB_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        AB_ce0 : IN STD_LOGIC;
        AB_we0 : IN STD_LOGIC;
        AB_d0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matrixmul_AXILiteS_s_axi_U : component matrixmul_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        A_address0 => A_address0,
        A_ce0 => A_ce0,
        A_q0 => A_q0,
        B_address0 => B_address0,
        B_ce0 => B_ce0,
        B_q0 => B_q0,
        AB_address0 => AB_address0,
        AB_ce0 => AB_ce0,
        AB_we0 => AB_we0,
        AB_d0 => add_ln16_30_reg_1852);

    matrixmul_mul_32sbkb_U1 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => trunc_ln16_1_reg_1277,
        din1 => trunc_ln16_reg_1272,
        ce => ap_const_logic_1,
        dout => grp_fu_948_p2);

    matrixmul_mul_32sbkb_U2 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_5_reg_1287,
        din1 => tmp_4_reg_1282,
        ce => ap_const_logic_1,
        dout => grp_fu_952_p2);

    matrixmul_mul_32sbkb_U3 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_7_reg_1297,
        din1 => tmp_6_reg_1292,
        ce => ap_const_logic_1,
        dout => grp_fu_956_p2);

    matrixmul_mul_32sbkb_U4 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_9_reg_1307,
        din1 => tmp_8_reg_1302,
        ce => ap_const_logic_1,
        dout => grp_fu_960_p2);

    matrixmul_mul_32sbkb_U5 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_2_reg_1317,
        din1 => tmp_s_reg_1312,
        ce => ap_const_logic_1,
        dout => grp_fu_964_p2);

    matrixmul_mul_32sbkb_U6 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_10_reg_1327,
        din1 => tmp_3_reg_1322,
        ce => ap_const_logic_1,
        dout => grp_fu_968_p2);

    matrixmul_mul_32sbkb_U7 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_12_reg_1337,
        din1 => tmp_11_reg_1332,
        ce => ap_const_logic_1,
        dout => grp_fu_972_p2);

    matrixmul_mul_32sbkb_U8 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_14_reg_1347,
        din1 => tmp_13_reg_1342,
        ce => ap_const_logic_1,
        dout => grp_fu_976_p2);

    matrixmul_mul_32sbkb_U9 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_16_reg_1357,
        din1 => tmp_15_reg_1352,
        ce => ap_const_logic_1,
        dout => grp_fu_980_p2);

    matrixmul_mul_32sbkb_U10 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_18_reg_1367,
        din1 => tmp_17_reg_1362,
        ce => ap_const_logic_1,
        dout => grp_fu_984_p2);

    matrixmul_mul_32sbkb_U11 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_20_reg_1377,
        din1 => tmp_19_reg_1372,
        ce => ap_const_logic_1,
        dout => grp_fu_988_p2);

    matrixmul_mul_32sbkb_U12 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_22_reg_1387,
        din1 => tmp_21_reg_1382,
        ce => ap_const_logic_1,
        dout => grp_fu_992_p2);

    matrixmul_mul_32sbkb_U13 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_24_reg_1397,
        din1 => tmp_23_reg_1392,
        ce => ap_const_logic_1,
        dout => grp_fu_996_p2);

    matrixmul_mul_32sbkb_U14 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_26_reg_1407,
        din1 => tmp_25_reg_1402,
        ce => ap_const_logic_1,
        dout => grp_fu_1000_p2);

    matrixmul_mul_32sbkb_U15 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_28_reg_1417,
        din1 => tmp_27_reg_1412,
        ce => ap_const_logic_1,
        dout => grp_fu_1004_p2);

    matrixmul_mul_32sbkb_U16 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_30_reg_1427,
        din1 => tmp_29_reg_1422,
        ce => ap_const_logic_1,
        dout => grp_fu_1008_p2);

    matrixmul_mul_32sbkb_U17 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_32_reg_1437,
        din1 => tmp_31_reg_1432,
        ce => ap_const_logic_1,
        dout => grp_fu_1012_p2);

    matrixmul_mul_32sbkb_U18 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_34_reg_1447,
        din1 => tmp_33_reg_1442,
        ce => ap_const_logic_1,
        dout => grp_fu_1016_p2);

    matrixmul_mul_32sbkb_U19 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_36_reg_1457,
        din1 => tmp_35_reg_1452,
        ce => ap_const_logic_1,
        dout => grp_fu_1020_p2);

    matrixmul_mul_32sbkb_U20 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_38_reg_1467,
        din1 => tmp_37_reg_1462,
        ce => ap_const_logic_1,
        dout => grp_fu_1024_p2);

    matrixmul_mul_32sbkb_U21 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_40_reg_1477,
        din1 => tmp_39_reg_1472,
        ce => ap_const_logic_1,
        dout => grp_fu_1028_p2);

    matrixmul_mul_32sbkb_U22 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_42_reg_1487,
        din1 => tmp_41_reg_1482,
        ce => ap_const_logic_1,
        dout => grp_fu_1032_p2);

    matrixmul_mul_32sbkb_U23 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_44_reg_1497,
        din1 => tmp_43_reg_1492,
        ce => ap_const_logic_1,
        dout => grp_fu_1036_p2);

    matrixmul_mul_32sbkb_U24 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_46_reg_1507,
        din1 => tmp_45_reg_1502,
        ce => ap_const_logic_1,
        dout => grp_fu_1040_p2);

    matrixmul_mul_32sbkb_U25 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_48_reg_1517,
        din1 => tmp_47_reg_1512,
        ce => ap_const_logic_1,
        dout => grp_fu_1044_p2);

    matrixmul_mul_32sbkb_U26 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_50_reg_1527,
        din1 => tmp_49_reg_1522,
        ce => ap_const_logic_1,
        dout => grp_fu_1048_p2);

    matrixmul_mul_32sbkb_U27 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_52_reg_1537,
        din1 => tmp_51_reg_1532,
        ce => ap_const_logic_1,
        dout => grp_fu_1052_p2);

    matrixmul_mul_32sbkb_U28 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_54_reg_1547,
        din1 => tmp_53_reg_1542,
        ce => ap_const_logic_1,
        dout => grp_fu_1056_p2);

    matrixmul_mul_32sbkb_U29 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_56_reg_1557,
        din1 => tmp_55_reg_1552,
        ce => ap_const_logic_1,
        dout => grp_fu_1060_p2);

    matrixmul_mul_32sbkb_U30 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_58_reg_1567,
        din1 => tmp_57_reg_1562,
        ce => ap_const_logic_1,
        dout => grp_fu_1064_p2);

    matrixmul_mul_32sbkb_U31 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_60_reg_1577,
        din1 => tmp_59_reg_1572,
        ce => ap_const_logic_1,
        dout => grp_fu_1068_p2);

    matrixmul_mul_32sbkb_U32 : component matrixmul_mul_32sbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_62_reg_1587,
        din1 => tmp_61_reg_1582,
        ce => ap_const_logic_1,
        dout => grp_fu_1072_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_244 <= select_ln16_1_reg_1250;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_244 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_233 <= add_ln10_fu_272_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_233 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    j_0_reg_255_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_0_reg_255 <= j_fu_306_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_255 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_10_reg_1772 <= add_ln16_10_fu_1092_p2;
                add_ln16_15_reg_1777 <= add_ln16_15_fu_1096_p2;
                add_ln16_18_reg_1782 <= add_ln16_18_fu_1100_p2;
                add_ln16_19_reg_1787 <= add_ln16_19_fu_1104_p2;
                add_ln16_22_reg_1792 <= add_ln16_22_fu_1108_p2;
                add_ln16_25_reg_1797 <= add_ln16_25_fu_1112_p2;
                add_ln16_26_reg_1802 <= add_ln16_26_fu_1116_p2;
                add_ln16_3_reg_1757 <= add_ln16_3_fu_1080_p2;
                add_ln16_4_reg_1762 <= add_ln16_4_fu_1084_p2;
                add_ln16_7_reg_1767 <= add_ln16_7_fu_1088_p2;
                add_ln16_reg_1752 <= add_ln16_fu_1076_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_12_reg_1817 <= add_ln16_12_fu_1142_p2;
                add_ln16_17_reg_1822 <= add_ln16_17_fu_1151_p2;
                add_ln16_24_reg_1827 <= add_ln16_24_fu_1160_p2;
                add_ln16_2_reg_1807 <= add_ln16_2_fu_1124_p2;
                add_ln16_9_reg_1812 <= add_ln16_9_fu_1133_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln16_12_reg_1817_pp0_iter10_reg <= add_ln16_12_reg_1817;
                add_ln16_18_reg_1782_pp0_iter9_reg <= add_ln16_18_reg_1782;
                add_ln16_19_reg_1787_pp0_iter9_reg <= add_ln16_19_reg_1787;
                add_ln16_21_reg_1837_pp0_iter11_reg <= add_ln16_21_reg_1837;
                add_ln16_25_reg_1797_pp0_iter9_reg <= add_ln16_25_reg_1797;
                add_ln16_26_reg_1802_pp0_iter9_reg <= add_ln16_26_reg_1802;
                add_ln16_28_reg_1842_pp0_iter11_reg <= add_ln16_28_reg_1842;
                add_ln16_3_reg_1757_pp0_iter9_reg <= add_ln16_3_reg_1757;
                add_ln16_4_reg_1762_pp0_iter9_reg <= add_ln16_4_reg_1762;
                add_ln16_9_reg_1812_pp0_iter10_reg <= add_ln16_9_reg_1812;
                icmp_ln10_reg_1235_pp0_iter10_reg <= icmp_ln10_reg_1235_pp0_iter9_reg;
                icmp_ln10_reg_1235_pp0_iter11_reg <= icmp_ln10_reg_1235_pp0_iter10_reg;
                icmp_ln10_reg_1235_pp0_iter12_reg <= icmp_ln10_reg_1235_pp0_iter11_reg;
                icmp_ln10_reg_1235_pp0_iter2_reg <= icmp_ln10_reg_1235_pp0_iter1_reg;
                icmp_ln10_reg_1235_pp0_iter3_reg <= icmp_ln10_reg_1235_pp0_iter2_reg;
                icmp_ln10_reg_1235_pp0_iter4_reg <= icmp_ln10_reg_1235_pp0_iter3_reg;
                icmp_ln10_reg_1235_pp0_iter5_reg <= icmp_ln10_reg_1235_pp0_iter4_reg;
                icmp_ln10_reg_1235_pp0_iter6_reg <= icmp_ln10_reg_1235_pp0_iter5_reg;
                icmp_ln10_reg_1235_pp0_iter7_reg <= icmp_ln10_reg_1235_pp0_iter6_reg;
                icmp_ln10_reg_1235_pp0_iter8_reg <= icmp_ln10_reg_1235_pp0_iter7_reg;
                icmp_ln10_reg_1235_pp0_iter9_reg <= icmp_ln10_reg_1235_pp0_iter8_reg;
                mul_ln16_10_reg_1642_pp0_iter8_reg <= mul_ln16_10_reg_1642;
                mul_ln16_11_reg_1647_pp0_iter8_reg <= mul_ln16_11_reg_1647;
                mul_ln16_14_reg_1662_pp0_iter8_reg <= mul_ln16_14_reg_1662;
                mul_ln16_15_reg_1667_pp0_iter8_reg <= mul_ln16_15_reg_1667;
                mul_ln16_18_reg_1682_pp0_iter8_reg <= mul_ln16_18_reg_1682;
                mul_ln16_19_reg_1687_pp0_iter8_reg <= mul_ln16_19_reg_1687;
                mul_ln16_26_reg_1722_pp0_iter8_reg <= mul_ln16_26_reg_1722;
                mul_ln16_27_reg_1727_pp0_iter8_reg <= mul_ln16_27_reg_1727;
                mul_ln16_2_reg_1602_pp0_iter8_reg <= mul_ln16_2_reg_1602;
                mul_ln16_3_reg_1607_pp0_iter8_reg <= mul_ln16_3_reg_1607;
                select_ln16_1_reg_1250_pp0_iter10_reg <= select_ln16_1_reg_1250_pp0_iter9_reg;
                select_ln16_1_reg_1250_pp0_iter11_reg <= select_ln16_1_reg_1250_pp0_iter10_reg;
                select_ln16_1_reg_1250_pp0_iter12_reg <= select_ln16_1_reg_1250_pp0_iter11_reg;
                select_ln16_1_reg_1250_pp0_iter2_reg <= select_ln16_1_reg_1250_pp0_iter1_reg;
                select_ln16_1_reg_1250_pp0_iter3_reg <= select_ln16_1_reg_1250_pp0_iter2_reg;
                select_ln16_1_reg_1250_pp0_iter4_reg <= select_ln16_1_reg_1250_pp0_iter3_reg;
                select_ln16_1_reg_1250_pp0_iter5_reg <= select_ln16_1_reg_1250_pp0_iter4_reg;
                select_ln16_1_reg_1250_pp0_iter6_reg <= select_ln16_1_reg_1250_pp0_iter5_reg;
                select_ln16_1_reg_1250_pp0_iter7_reg <= select_ln16_1_reg_1250_pp0_iter6_reg;
                select_ln16_1_reg_1250_pp0_iter8_reg <= select_ln16_1_reg_1250_pp0_iter7_reg;
                select_ln16_1_reg_1250_pp0_iter9_reg <= select_ln16_1_reg_1250_pp0_iter8_reg;
                select_ln16_reg_1244_pp0_iter10_reg <= select_ln16_reg_1244_pp0_iter9_reg;
                select_ln16_reg_1244_pp0_iter11_reg <= select_ln16_reg_1244_pp0_iter10_reg;
                select_ln16_reg_1244_pp0_iter12_reg <= select_ln16_reg_1244_pp0_iter11_reg;
                select_ln16_reg_1244_pp0_iter2_reg <= select_ln16_reg_1244_pp0_iter1_reg;
                select_ln16_reg_1244_pp0_iter3_reg <= select_ln16_reg_1244_pp0_iter2_reg;
                select_ln16_reg_1244_pp0_iter4_reg <= select_ln16_reg_1244_pp0_iter3_reg;
                select_ln16_reg_1244_pp0_iter5_reg <= select_ln16_reg_1244_pp0_iter4_reg;
                select_ln16_reg_1244_pp0_iter6_reg <= select_ln16_reg_1244_pp0_iter5_reg;
                select_ln16_reg_1244_pp0_iter7_reg <= select_ln16_reg_1244_pp0_iter6_reg;
                select_ln16_reg_1244_pp0_iter8_reg <= select_ln16_reg_1244_pp0_iter7_reg;
                select_ln16_reg_1244_pp0_iter9_reg <= select_ln16_reg_1244_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter10_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_14_reg_1847 <= add_ln16_14_fu_1196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter9_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_21_reg_1837 <= add_ln16_21_fu_1178_p2;
                add_ln16_28_reg_1842 <= add_ln16_28_fu_1187_p2;
                add_ln16_6_reg_1832 <= add_ln16_6_fu_1169_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln16_30_reg_1852 <= add_ln16_30_fu_1205_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln10_reg_1235 <= icmp_ln10_fu_266_p2;
                icmp_ln10_reg_1235_pp0_iter1_reg <= icmp_ln10_reg_1235;
                select_ln16_1_reg_1250_pp0_iter1_reg <= select_ln16_1_reg_1250;
                select_ln16_reg_1244_pp0_iter1_reg <= select_ln16_reg_1244;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln16_10_reg_1642 <= grp_fu_988_p2;
                mul_ln16_11_reg_1647 <= grp_fu_992_p2;
                mul_ln16_12_reg_1652 <= grp_fu_996_p2;
                mul_ln16_13_reg_1657 <= grp_fu_1000_p2;
                mul_ln16_14_reg_1662 <= grp_fu_1004_p2;
                mul_ln16_15_reg_1667 <= grp_fu_1008_p2;
                mul_ln16_16_reg_1672 <= grp_fu_1012_p2;
                mul_ln16_17_reg_1677 <= grp_fu_1016_p2;
                mul_ln16_18_reg_1682 <= grp_fu_1020_p2;
                mul_ln16_19_reg_1687 <= grp_fu_1024_p2;
                mul_ln16_1_reg_1597 <= grp_fu_952_p2;
                mul_ln16_20_reg_1692 <= grp_fu_1028_p2;
                mul_ln16_21_reg_1697 <= grp_fu_1032_p2;
                mul_ln16_22_reg_1702 <= grp_fu_1036_p2;
                mul_ln16_23_reg_1707 <= grp_fu_1040_p2;
                mul_ln16_24_reg_1712 <= grp_fu_1044_p2;
                mul_ln16_25_reg_1717 <= grp_fu_1048_p2;
                mul_ln16_26_reg_1722 <= grp_fu_1052_p2;
                mul_ln16_27_reg_1727 <= grp_fu_1056_p2;
                mul_ln16_28_reg_1732 <= grp_fu_1060_p2;
                mul_ln16_29_reg_1737 <= grp_fu_1064_p2;
                mul_ln16_2_reg_1602 <= grp_fu_956_p2;
                mul_ln16_30_reg_1742 <= grp_fu_1068_p2;
                mul_ln16_31_reg_1747 <= grp_fu_1072_p2;
                mul_ln16_3_reg_1607 <= grp_fu_960_p2;
                mul_ln16_4_reg_1612 <= grp_fu_964_p2;
                mul_ln16_5_reg_1617 <= grp_fu_968_p2;
                mul_ln16_6_reg_1622 <= grp_fu_972_p2;
                mul_ln16_7_reg_1627 <= grp_fu_976_p2;
                mul_ln16_8_reg_1632 <= grp_fu_980_p2;
                mul_ln16_9_reg_1637 <= grp_fu_984_p2;
                mul_ln16_reg_1592 <= grp_fu_948_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln16_1_reg_1250 <= select_ln16_1_fu_298_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_266_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln16_reg_1244 <= select_ln16_fu_290_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_1235_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_1327 <= B_q0(191 downto 160);
                tmp_11_reg_1332 <= A_q0(223 downto 192);
                tmp_12_reg_1337 <= B_q0(223 downto 192);
                tmp_13_reg_1342 <= A_q0(255 downto 224);
                tmp_14_reg_1347 <= B_q0(255 downto 224);
                tmp_15_reg_1352 <= A_q0(287 downto 256);
                tmp_16_reg_1357 <= B_q0(287 downto 256);
                tmp_17_reg_1362 <= A_q0(319 downto 288);
                tmp_18_reg_1367 <= B_q0(319 downto 288);
                tmp_19_reg_1372 <= A_q0(351 downto 320);
                tmp_20_reg_1377 <= B_q0(351 downto 320);
                tmp_21_reg_1382 <= A_q0(383 downto 352);
                tmp_22_reg_1387 <= B_q0(383 downto 352);
                tmp_23_reg_1392 <= A_q0(415 downto 384);
                tmp_24_reg_1397 <= B_q0(415 downto 384);
                tmp_25_reg_1402 <= A_q0(447 downto 416);
                tmp_26_reg_1407 <= B_q0(447 downto 416);
                tmp_27_reg_1412 <= A_q0(479 downto 448);
                tmp_28_reg_1417 <= B_q0(479 downto 448);
                tmp_29_reg_1422 <= A_q0(511 downto 480);
                tmp_2_reg_1317 <= B_q0(159 downto 128);
                tmp_30_reg_1427 <= B_q0(511 downto 480);
                tmp_31_reg_1432 <= A_q0(543 downto 512);
                tmp_32_reg_1437 <= B_q0(543 downto 512);
                tmp_33_reg_1442 <= A_q0(575 downto 544);
                tmp_34_reg_1447 <= B_q0(575 downto 544);
                tmp_35_reg_1452 <= A_q0(607 downto 576);
                tmp_36_reg_1457 <= B_q0(607 downto 576);
                tmp_37_reg_1462 <= A_q0(639 downto 608);
                tmp_38_reg_1467 <= B_q0(639 downto 608);
                tmp_39_reg_1472 <= A_q0(671 downto 640);
                tmp_3_reg_1322 <= A_q0(191 downto 160);
                tmp_40_reg_1477 <= B_q0(671 downto 640);
                tmp_41_reg_1482 <= A_q0(703 downto 672);
                tmp_42_reg_1487 <= B_q0(703 downto 672);
                tmp_43_reg_1492 <= A_q0(735 downto 704);
                tmp_44_reg_1497 <= B_q0(735 downto 704);
                tmp_45_reg_1502 <= A_q0(767 downto 736);
                tmp_46_reg_1507 <= B_q0(767 downto 736);
                tmp_47_reg_1512 <= A_q0(799 downto 768);
                tmp_48_reg_1517 <= B_q0(799 downto 768);
                tmp_49_reg_1522 <= A_q0(831 downto 800);
                tmp_4_reg_1282 <= A_q0(63 downto 32);
                tmp_50_reg_1527 <= B_q0(831 downto 800);
                tmp_51_reg_1532 <= A_q0(863 downto 832);
                tmp_52_reg_1537 <= B_q0(863 downto 832);
                tmp_53_reg_1542 <= A_q0(895 downto 864);
                tmp_54_reg_1547 <= B_q0(895 downto 864);
                tmp_55_reg_1552 <= A_q0(927 downto 896);
                tmp_56_reg_1557 <= B_q0(927 downto 896);
                tmp_57_reg_1562 <= A_q0(959 downto 928);
                tmp_58_reg_1567 <= B_q0(959 downto 928);
                tmp_59_reg_1572 <= A_q0(991 downto 960);
                tmp_5_reg_1287 <= B_q0(63 downto 32);
                tmp_60_reg_1577 <= B_q0(991 downto 960);
                tmp_61_reg_1582 <= A_q0(1023 downto 992);
                tmp_62_reg_1587 <= B_q0(1023 downto 992);
                tmp_6_reg_1292 <= A_q0(95 downto 64);
                tmp_7_reg_1297 <= B_q0(95 downto 64);
                tmp_8_reg_1302 <= A_q0(127 downto 96);
                tmp_9_reg_1307 <= B_q0(127 downto 96);
                tmp_s_reg_1312 <= A_q0(159 downto 128);
                trunc_ln16_1_reg_1277 <= trunc_ln16_1_fu_324_p1;
                trunc_ln16_reg_1272 <= trunc_ln16_fu_320_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_266_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((icmp_ln10_fu_266_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    AB_address0 <= zext_ln18_1_fu_1230_p1(10 - 1 downto 0);

    AB_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AB_ce0 <= ap_const_logic_1;
        else 
            AB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    AB_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_1235_pp0_iter12_reg, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (icmp_ln10_reg_1235_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            AB_we0 <= ap_const_logic_1;
        else 
            AB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    A_address0 <= zext_ln16_fu_312_p1(5 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln16_1_fu_316_p1(5 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_fu_272_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_233) + unsigned(ap_const_lv11_1));
    add_ln16_10_fu_1092_p2 <= std_logic_vector(unsigned(mul_ln16_13_reg_1657) + unsigned(mul_ln16_12_reg_1652));
    add_ln16_11_fu_1138_p2 <= std_logic_vector(unsigned(mul_ln16_15_reg_1667_pp0_iter8_reg) + unsigned(mul_ln16_14_reg_1662_pp0_iter8_reg));
    add_ln16_12_fu_1142_p2 <= std_logic_vector(unsigned(add_ln16_10_reg_1772) + unsigned(add_ln16_11_fu_1138_p2));
    add_ln16_13_fu_1192_p2 <= std_logic_vector(unsigned(add_ln16_9_reg_1812_pp0_iter10_reg) + unsigned(add_ln16_12_reg_1817_pp0_iter10_reg));
    add_ln16_14_fu_1196_p2 <= std_logic_vector(unsigned(add_ln16_6_reg_1832) + unsigned(add_ln16_13_fu_1192_p2));
    add_ln16_15_fu_1096_p2 <= std_logic_vector(unsigned(mul_ln16_17_reg_1677) + unsigned(mul_ln16_16_reg_1672));
    add_ln16_16_fu_1147_p2 <= std_logic_vector(unsigned(mul_ln16_19_reg_1687_pp0_iter8_reg) + unsigned(mul_ln16_18_reg_1682_pp0_iter8_reg));
    add_ln16_17_fu_1151_p2 <= std_logic_vector(unsigned(add_ln16_15_reg_1777) + unsigned(add_ln16_16_fu_1147_p2));
    add_ln16_18_fu_1100_p2 <= std_logic_vector(unsigned(mul_ln16_21_reg_1697) + unsigned(mul_ln16_20_reg_1692));
    add_ln16_19_fu_1104_p2 <= std_logic_vector(unsigned(mul_ln16_23_reg_1707) + unsigned(mul_ln16_22_reg_1702));
    add_ln16_1_fu_1120_p2 <= std_logic_vector(unsigned(mul_ln16_3_reg_1607_pp0_iter8_reg) + unsigned(mul_ln16_2_reg_1602_pp0_iter8_reg));
    add_ln16_20_fu_1174_p2 <= std_logic_vector(unsigned(add_ln16_18_reg_1782_pp0_iter9_reg) + unsigned(add_ln16_19_reg_1787_pp0_iter9_reg));
    add_ln16_21_fu_1178_p2 <= std_logic_vector(unsigned(add_ln16_17_reg_1822) + unsigned(add_ln16_20_fu_1174_p2));
    add_ln16_22_fu_1108_p2 <= std_logic_vector(unsigned(mul_ln16_25_reg_1717) + unsigned(mul_ln16_24_reg_1712));
    add_ln16_23_fu_1156_p2 <= std_logic_vector(unsigned(mul_ln16_27_reg_1727_pp0_iter8_reg) + unsigned(mul_ln16_26_reg_1722_pp0_iter8_reg));
    add_ln16_24_fu_1160_p2 <= std_logic_vector(unsigned(add_ln16_22_reg_1792) + unsigned(add_ln16_23_fu_1156_p2));
    add_ln16_25_fu_1112_p2 <= std_logic_vector(unsigned(mul_ln16_29_reg_1737) + unsigned(mul_ln16_28_reg_1732));
    add_ln16_26_fu_1116_p2 <= std_logic_vector(unsigned(mul_ln16_31_reg_1747) + unsigned(mul_ln16_30_reg_1742));
    add_ln16_27_fu_1183_p2 <= std_logic_vector(unsigned(add_ln16_25_reg_1797_pp0_iter9_reg) + unsigned(add_ln16_26_reg_1802_pp0_iter9_reg));
    add_ln16_28_fu_1187_p2 <= std_logic_vector(unsigned(add_ln16_24_reg_1827) + unsigned(add_ln16_27_fu_1183_p2));
    add_ln16_29_fu_1201_p2 <= std_logic_vector(unsigned(add_ln16_21_reg_1837_pp0_iter11_reg) + unsigned(add_ln16_28_reg_1842_pp0_iter11_reg));
    add_ln16_2_fu_1124_p2 <= std_logic_vector(unsigned(add_ln16_reg_1752) + unsigned(add_ln16_1_fu_1120_p2));
    add_ln16_30_fu_1205_p2 <= std_logic_vector(unsigned(add_ln16_14_reg_1847) + unsigned(add_ln16_29_fu_1201_p2));
    add_ln16_3_fu_1080_p2 <= std_logic_vector(unsigned(mul_ln16_5_reg_1617) + unsigned(mul_ln16_4_reg_1612));
    add_ln16_4_fu_1084_p2 <= std_logic_vector(unsigned(mul_ln16_7_reg_1627) + unsigned(mul_ln16_6_reg_1622));
    add_ln16_5_fu_1165_p2 <= std_logic_vector(unsigned(add_ln16_3_reg_1757_pp0_iter9_reg) + unsigned(add_ln16_4_reg_1762_pp0_iter9_reg));
    add_ln16_6_fu_1169_p2 <= std_logic_vector(unsigned(add_ln16_2_reg_1807) + unsigned(add_ln16_5_fu_1165_p2));
    add_ln16_7_fu_1088_p2 <= std_logic_vector(unsigned(mul_ln16_9_reg_1637) + unsigned(mul_ln16_8_reg_1632));
    add_ln16_8_fu_1129_p2 <= std_logic_vector(unsigned(mul_ln16_11_reg_1647_pp0_iter8_reg) + unsigned(mul_ln16_10_reg_1642_pp0_iter8_reg));
    add_ln16_9_fu_1133_p2 <= std_logic_vector(unsigned(add_ln16_7_reg_1767) + unsigned(add_ln16_8_fu_1129_p2));
    add_ln16_fu_1076_p2 <= std_logic_vector(unsigned(mul_ln16_1_reg_1597) + unsigned(mul_ln16_reg_1592));
    add_ln18_fu_1224_p2 <= std_logic_vector(unsigned(zext_ln11_fu_1217_p1) + unsigned(zext_ln18_fu_1221_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state16 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_266_p2)
    begin
        if ((icmp_ln10_fu_266_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_248_p4_assign_proc : process(i_0_reg_244, icmp_ln10_reg_1235, ap_CS_fsm_pp0_stage0, select_ln16_1_reg_1250, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_1235 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_i_0_phi_fu_248_p4 <= select_ln16_1_reg_1250;
        else 
            ap_phi_mux_i_0_phi_fu_248_p4 <= i_0_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    i_fu_278_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_i_0_phi_fu_248_p4));
    icmp_ln10_fu_266_p2 <= "1" when (indvar_flatten_reg_233 = ap_const_lv11_400) else "0";
    icmp_ln11_fu_284_p2 <= "1" when (j_0_reg_255 = ap_const_lv6_20) else "0";
    j_fu_306_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln16_fu_290_p3));
    select_ln16_1_fu_298_p3 <= 
        i_fu_278_p2 when (icmp_ln11_fu_284_p2(0) = '1') else 
        ap_phi_mux_i_0_phi_fu_248_p4;
    select_ln16_fu_290_p3 <= 
        ap_const_lv6_0 when (icmp_ln11_fu_284_p2(0) = '1') else 
        j_0_reg_255;
    tmp_fu_1210_p3 <= (select_ln16_1_reg_1250_pp0_iter12_reg & ap_const_lv5_0);
    trunc_ln16_1_fu_324_p1 <= B_q0(32 - 1 downto 0);
    trunc_ln16_fu_320_p1 <= A_q0(32 - 1 downto 0);
    zext_ln11_fu_1217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1210_p3),12));
    zext_ln16_1_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_1244),64));
    zext_ln16_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_reg_1250),64));
    zext_ln18_1_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_1224_p2),64));
    zext_ln18_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_reg_1244_pp0_iter12_reg),12));
end behav;
